{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "584d9ab4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da2e6f0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>24/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>22:20</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>05:50</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>9/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>09:25</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>18:05</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>16:50</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10678</th>\n",
       "      <td>Air Asia</td>\n",
       "      <td>9/04/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → BLR</td>\n",
       "      <td>19:55</td>\n",
       "      <td>22:25</td>\n",
       "      <td>2h 30m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10679</th>\n",
       "      <td>Air India</td>\n",
       "      <td>27/04/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → BLR</td>\n",
       "      <td>20:45</td>\n",
       "      <td>23:20</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10680</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>27/04/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>08:20</td>\n",
       "      <td>11:20</td>\n",
       "      <td>3h</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>7229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10681</th>\n",
       "      <td>Vistara</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>11:30</td>\n",
       "      <td>14:10</td>\n",
       "      <td>2h 40m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>12648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10682</th>\n",
       "      <td>Air India</td>\n",
       "      <td>9/05/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → GOI → BOM → COK</td>\n",
       "      <td>10:55</td>\n",
       "      <td>19:15</td>\n",
       "      <td>8h 20m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>11753</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10683 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Airline Date_of_Journey    Source Destination  \\\n",
       "0           IndiGo      24/03/2019  Banglore   New Delhi   \n",
       "1        Air India       1/05/2019   Kolkata    Banglore   \n",
       "2      Jet Airways       9/06/2019     Delhi      Cochin   \n",
       "3           IndiGo      12/05/2019   Kolkata    Banglore   \n",
       "4           IndiGo      01/03/2019  Banglore   New Delhi   \n",
       "...            ...             ...       ...         ...   \n",
       "10678     Air Asia       9/04/2019   Kolkata    Banglore   \n",
       "10679    Air India      27/04/2019   Kolkata    Banglore   \n",
       "10680  Jet Airways      27/04/2019  Banglore       Delhi   \n",
       "10681      Vistara      01/03/2019  Banglore   New Delhi   \n",
       "10682    Air India       9/05/2019     Delhi      Cochin   \n",
       "\n",
       "                       Route Dep_Time  Arrival_Time Duration Total_Stops  \\\n",
       "0                  BLR → DEL    22:20  01:10 22 Mar   2h 50m    non-stop   \n",
       "1      CCU → IXR → BBI → BLR    05:50         13:15   7h 25m     2 stops   \n",
       "2      DEL → LKO → BOM → COK    09:25  04:25 10 Jun      19h     2 stops   \n",
       "3            CCU → NAG → BLR    18:05         23:30   5h 25m      1 stop   \n",
       "4            BLR → NAG → DEL    16:50         21:35   4h 45m      1 stop   \n",
       "...                      ...      ...           ...      ...         ...   \n",
       "10678              CCU → BLR    19:55         22:25   2h 30m    non-stop   \n",
       "10679              CCU → BLR    20:45         23:20   2h 35m    non-stop   \n",
       "10680              BLR → DEL    08:20         11:20       3h    non-stop   \n",
       "10681              BLR → DEL    11:30         14:10   2h 40m    non-stop   \n",
       "10682  DEL → GOI → BOM → COK    10:55         19:15   8h 20m     2 stops   \n",
       "\n",
       "      Additional_Info  Price  \n",
       "0             No info   3897  \n",
       "1             No info   7662  \n",
       "2             No info  13882  \n",
       "3             No info   6218  \n",
       "4             No info  13302  \n",
       "...               ...    ...  \n",
       "10678         No info   4107  \n",
       "10679         No info   4145  \n",
       "10680         No info   7229  \n",
       "10681         No info  12648  \n",
       "10682         No info  11753  \n",
       "\n",
       "[10683 rows x 11 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Flight_train=pd.read_excel('flight_train.xlsx')\n",
    "Flight_train\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "38b3d4bb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10683, 11)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Flight_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea96cf88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No info                         8345\n",
       "In-flight meal not included     1982\n",
       "No check-in baggage included     320\n",
       "1 Long layover                    19\n",
       "Change airports                    7\n",
       "Business class                     4\n",
       "No Info                            3\n",
       "1 Short layover                    1\n",
       "Red-eye flight                     1\n",
       "2 Long layover                     1\n",
       "Name: Additional_Info, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Flight_train.Additional_Info.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03396588",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            0\n",
       "Date_of_Journey    0\n",
       "Source             0\n",
       "Destination        0\n",
       "Route              1\n",
       "Dep_Time           0\n",
       "Arrival_Time       0\n",
       "Duration           0\n",
       "Total_Stops        1\n",
       "Additional_Info    0\n",
       "Price              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Flight_train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3a747670",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>6/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → BOM → COK</td>\n",
       "      <td>17:30</td>\n",
       "      <td>04:25 07 Jun</td>\n",
       "      <td>10h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → MAA → BLR</td>\n",
       "      <td>06:20</td>\n",
       "      <td>10:20</td>\n",
       "      <td>4h</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>21/05/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → BOM → COK</td>\n",
       "      <td>19:15</td>\n",
       "      <td>19:00 22 May</td>\n",
       "      <td>23h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>In-flight meal not included</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>21/05/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → BOM → COK</td>\n",
       "      <td>08:00</td>\n",
       "      <td>21:00</td>\n",
       "      <td>13h</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Air Asia</td>\n",
       "      <td>24/06/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>23:55</td>\n",
       "      <td>02:45 25 Jun</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Airline Date_of_Journey    Source Destination            Route  \\\n",
       "0        Jet Airways       6/06/2019     Delhi      Cochin  DEL → BOM → COK   \n",
       "1             IndiGo      12/05/2019   Kolkata    Banglore  CCU → MAA → BLR   \n",
       "2        Jet Airways      21/05/2019     Delhi      Cochin  DEL → BOM → COK   \n",
       "3  Multiple carriers      21/05/2019     Delhi      Cochin  DEL → BOM → COK   \n",
       "4           Air Asia      24/06/2019  Banglore       Delhi        BLR → DEL   \n",
       "\n",
       "  Dep_Time  Arrival_Time Duration Total_Stops              Additional_Info  \n",
       "0    17:30  04:25 07 Jun  10h 55m      1 stop                      No info  \n",
       "1    06:20         10:20       4h      1 stop                      No info  \n",
       "2    19:15  19:00 22 May  23h 45m      1 stop  In-flight meal not included  \n",
       "3    08:00         21:00      13h      1 stop                      No info  \n",
       "4    23:55  02:45 25 Jun   2h 50m    non-stop                      No info  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Flight_test=pd.read_excel('Test_flightt.xlsx')\n",
    "Flight_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1a8fdc40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2671, 10)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Flight_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4a478df9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No info                         2148\n",
       "In-flight meal not included      444\n",
       "No check-in baggage included      76\n",
       "1 Long layover                     1\n",
       "Business class                     1\n",
       "Change airports                    1\n",
       "Name: Additional_Info, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Flight_test.Additional_Info.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "90740897",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>24/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>22:20</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>05:50</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>9/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>09:25</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>18:05</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>16:50</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2666</th>\n",
       "      <td>Air India</td>\n",
       "      <td>6/06/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → DEL → BLR</td>\n",
       "      <td>20:30</td>\n",
       "      <td>20:25 07 Jun</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2667</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>27/03/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → BLR</td>\n",
       "      <td>14:20</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2668</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>6/03/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → BOM → COK</td>\n",
       "      <td>21:50</td>\n",
       "      <td>04:25 07 Mar</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2669</th>\n",
       "      <td>Air India</td>\n",
       "      <td>6/03/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → BOM → COK</td>\n",
       "      <td>04:00</td>\n",
       "      <td>19:15</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2670</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>15/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → BOM → COK</td>\n",
       "      <td>04:55</td>\n",
       "      <td>19:15</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Airline Date_of_Journey    Source Destination  \\\n",
       "0                IndiGo      24/03/2019  Banglore   New Delhi   \n",
       "1             Air India       1/05/2019   Kolkata    Banglore   \n",
       "2           Jet Airways       9/06/2019     Delhi      Cochin   \n",
       "3                IndiGo      12/05/2019   Kolkata    Banglore   \n",
       "4                IndiGo      01/03/2019  Banglore   New Delhi   \n",
       "...                 ...             ...       ...         ...   \n",
       "2666          Air India       6/06/2019   Kolkata    Banglore   \n",
       "2667             IndiGo      27/03/2019   Kolkata    Banglore   \n",
       "2668        Jet Airways       6/03/2019     Delhi      Cochin   \n",
       "2669          Air India       6/03/2019     Delhi      Cochin   \n",
       "2670  Multiple carriers      15/06/2019     Delhi      Cochin   \n",
       "\n",
       "                      Route Dep_Time  Arrival_Time Duration Total_Stops  \\\n",
       "0                 BLR → DEL    22:20  01:10 22 Mar   2h 50m    non-stop   \n",
       "1     CCU → IXR → BBI → BLR    05:50         13:15   7h 25m     2 stops   \n",
       "2     DEL → LKO → BOM → COK    09:25  04:25 10 Jun      19h     2 stops   \n",
       "3           CCU → NAG → BLR    18:05         23:30   5h 25m      1 stop   \n",
       "4           BLR → NAG → DEL    16:50         21:35   4h 45m      1 stop   \n",
       "...                     ...      ...           ...      ...         ...   \n",
       "2666        CCU → DEL → BLR    20:30  20:25 07 Jun  23h 55m      1 stop   \n",
       "2667              CCU → BLR    14:20         16:55   2h 35m    non-stop   \n",
       "2668        DEL → BOM → COK    21:50  04:25 07 Mar   6h 35m      1 stop   \n",
       "2669        DEL → BOM → COK    04:00         19:15  15h 15m      1 stop   \n",
       "2670        DEL → BOM → COK    04:55         19:15  14h 20m      1 stop   \n",
       "\n",
       "     Additional_Info    Price  \n",
       "0            No info   3897.0  \n",
       "1            No info   7662.0  \n",
       "2            No info  13882.0  \n",
       "3            No info   6218.0  \n",
       "4            No info  13302.0  \n",
       "...              ...      ...  \n",
       "2666         No info      NaN  \n",
       "2667         No info      NaN  \n",
       "2668         No info      NaN  \n",
       "2669         No info      NaN  \n",
       "2670         No info      NaN  \n",
       "\n",
       "[13354 rows x 11 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f=pd.concat([Flight_train,Flight_test],axis=0)\n",
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b656672e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13354 entries, 0 to 2670\n",
      "Data columns (total 11 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Airline          13354 non-null  object \n",
      " 1   Date_of_Journey  13354 non-null  object \n",
      " 2   Source           13354 non-null  object \n",
      " 3   Destination      13354 non-null  object \n",
      " 4   Route            13353 non-null  object \n",
      " 5   Dep_Time         13354 non-null  object \n",
      " 6   Arrival_Time     13354 non-null  object \n",
      " 7   Duration         13354 non-null  object \n",
      " 8   Total_Stops      13353 non-null  object \n",
      " 9   Additional_Info  13354 non-null  object \n",
      " 10  Price            10683 non-null  float64\n",
      "dtypes: float64(1), object(10)\n",
      "memory usage: 1.2+ MB\n"
     ]
    }
   ],
   "source": [
    "f.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c478006d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline               0\n",
       "Date_of_Journey       0\n",
       "Source                0\n",
       "Destination           0\n",
       "Route                 1\n",
       "Dep_Time              0\n",
       "Arrival_Time          0\n",
       "Duration              0\n",
       "Total_Stops           1\n",
       "Additional_Info       0\n",
       "Price              2671\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0bdd3c5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DEL → BOM → COK                3000\n",
       "BLR → DEL                      1941\n",
       "CCU → BOM → BLR                1232\n",
       "CCU → BLR                       896\n",
       "BOM → HYD                       785\n",
       "                               ... \n",
       "BOM → JLR → HYD                   1\n",
       "BOM → NDC → HYD                   1\n",
       "BOM → COK → MAA → HYD             1\n",
       "BOM → JDH → JAI → DEL → HYD       1\n",
       "BOM → IXC → DEL → HYD             1\n",
       "Name: Route, Length: 132, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f.Route.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bceabaed",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# here we are droping the Route \n",
    "f.drop('Route',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "65dd6b67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize']=[15,8]\n",
    "sns.boxplot(x='Total_Stops',y='Price',data=f)\n",
    "plt.xticks(rotation=90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6d74e597",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['IndiGo', 'Air India', 'Jet Airways', 'SpiceJet',\n",
       "       'Multiple carriers', 'GoAir', 'Vistara', 'Air Asia',\n",
       "       'Vistara Premium economy', 'Jet Airways Business',\n",
       "       'Multiple carriers Premium economy', 'Trujet'], dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f.Airline.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8c0e0dc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize']=[15,8]\n",
    "sns.boxplot(x='Airline',y='Price',data=f)\n",
    "plt.xticks(rotation=90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "30b19dfe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize']=[15,8]\n",
    "sns.boxplot(x='Source',y='Price',data=f)\n",
    "plt.xticks(rotation=90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7bcd68d4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4gAAAINCAYAAAB8ulERAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAABDP0lEQVR4nO3de5idZX3v//d3JsMpEYRMOGWEYBPaosUDIxtPaKUTGE/469ZtWrtdu6WFWnfQ2u5f1VKkiL20tnWbuKWh0nZpUaD82oJuRzOgiFUKBoVwUhlLhJFAMuFgOBgmme/vj/UMzoyTySTOmmcd3q/rWtda973W86zvCotkfZ77fu4nMhNJkiRJkjrKLkCSJEmS1BgMiJIkSZIkwIAoSZIkSSoYECVJkiRJgAFRkiRJklQwIEqSJEmSAFhQdgHzrbu7O5ctW1Z2GZIkSZJUiltuuWUkM5dM91zbBcRly5axYcOGssuQJEmSpFJExA9395xTTCVJkiRJgAFRkiRJklQwIEqSJEmSAAOiJEmSJKlgQJQkSZIkAQZESZIkSVLBgChJkiRJAgyIkiRJkqSCAVGSJEmSBBgQJUmSJEkFA6IkSZIkCahzQIyIP4yIOyPijoj4XEQcEBGHRcRgRNxT3B864fXvi4ihiPheRJw+of+kiLi9eG5NRETRv39EXFH03xQRy+r5eSRJkiSpldUtIEbEUuBcoDcznw90AquA9wLXZeYK4LqiTUScUDz/POAM4JMR0Vns7mLgbGBFcTuj6D8LeCQzlwMfAz5Sr88jSZIkSa2u3lNMFwAHRsQC4CDgAeBMoFo8XwXeVDw+E7g8M3dk5r3AEHByRBwFHJyZN2ZmAp+ess34vq4CThsfXZQkSZIk7Z26BcTM/BHwV8B9wGbgscxcDxyRmZuL12wGDi82WQrcP2EXw0Xf0uLx1P5J22TmTuAxYHE9Pk8rGxkZYfXq1Wzbtq3sUiRJkiSVqJ5TTA+lNsJ3HHA0sDAifmumTabpyxn6Z9pmai1nR8SGiNiwdevWmQtvQ9VqlY0bN1KtVvf8YkmSJEktq55TTH8NuDczt2bmKPAvwMuAh4ppoxT3W4rXDwPPmbB9D7UpqcPF46n9k7YpprEeAjw8tZDMvCQzezOzd8mSJXP08VrDyMgIAwMDZCYDAwOOIkqSJEltrJ4B8T7glIg4qDgv8DTgbuAaoFK8pgJcXTy+BlhVrEx6HLXFaG4upqFuj4hTiv28fco24/t6M/CV4jxFzVK1WmX8j2xsbMxRREmSJKmN1fMcxJuoLRzzbeD24r0uAT4M9EXEPUBf0SYz7wSuBO4CvgS8MzN3Fbt7B/ApagvX/AAYKPovBRZHxBDwHooVUTV7g4ODjI6OAjA6Osr69etLrkiSJElSWRbUc+eZ+QHgA1O6d1AbTZzu9R8CPjRN/wbg+dP0/wR4y89fafvq6+vji1/8IqOjo3R1dbFy5cqyS5IkSZJUknpf5kINrlKpMH5lkI6ODiqVyh62kCRJktSqDIhtrru7m/7+fiKC/v5+Fi/2KiGSJElSu6rrFFM1h0qlwqZNmxw9lCRJktqcAVF0d3ezdu3assuQJEmSVDKnmEqSJEmSAAOiJEmSJKlgQJQkSZIkAQZESZIkSVLBgChJkiRJAgyIkiRJkqSCAVGSJEmSBBgQJUmSJEkFA6IkSZIkCTAgSpIkSZIKBkRJkiRJEmBAlCRJkiQVDIiSJEmSJMCAKEmSJEkqGBAlSZIkSYABUZIkSZJUMCBKkiRJkgADoiRJkiSpYECUJEmSJAEGREmSJElSwYAoSZIkSQIMiJIkSZKkggFRkiRJkgQYECVJkiRJBQOiJEmSJAkwIEqSJEmSCgZESZIkSRJgQJQkSZIkFQyIkiRJkiTAgChJkiRJKhgQJUmSJEmAAVGSJEmSVDAgSpIkSZIAA6IkSZIkqWBAlCRJkiQBBkRJkiRJUsGAKEmSJEkCDIiSJEmSpELdAmJE/GJE3Drh9uOIeHdEHBYRgxFxT3F/6IRt3hcRQxHxvYg4fUL/SRFxe/HcmoiIon//iLii6L8pIpbV6/NIkiRJUqurW0DMzO9l5gsz84XAScCTwL8C7wWuy8wVwHVFm4g4AVgFPA84A/hkRHQWu7sYOBtYUdzOKPrPAh7JzOXAx4CP1OvzSJIkSVKrm68ppqcBP8jMHwJnAtWivwq8qXh8JnB5Zu7IzHuBIeDkiDgKODgzb8zMBD49ZZvxfV0FnDY+uihJkiRJ2jvzFRBXAZ8rHh+RmZsBivvDi/6lwP0Tthku+pYWj6f2T9omM3cCjwGL61C/JEmSJLW8ugfEiNgPeCPwz3t66TR9OUP/TNtMreHsiNgQERu2bt26hzIkSZIkqT3NxwhiP/DtzHyoaD9UTBuluN9S9A8Dz5mwXQ/wQNHfM03/pG0iYgFwCPDw1AIy85LM7M3M3iVLlszJh5IkSZKkVjMfAfE3+On0UoBrgErxuAJcPaF/VbEy6XHUFqO5uZiGuj0iTinOL3z7lG3G9/Vm4CvFeYqSJEmSpL20oJ47j4iDgD7gnAndHwaujIizgPuAtwBk5p0RcSVwF7ATeGdm7iq2eQfwj8CBwEBxA7gU+ExEDFEbOVxVz88jSZIkSa0s2m3Arbe3Nzds2FB2GZIkSZJUioi4JTN7p3tuvlYxlSRJkiQ1OAOiJEmSJAkwIEqSJEmSCgZESZIkSRJgQJQkSZIkFQyIkiRJkiTAgChJkiRJKhgQJUmSJEmAAVGSJEmSVDAgSpIkSZIAA6IkSZIkqWBAlCRJkiQBBkRJkiRJUsGAKEmSJEkCDIiSJEmSpIIBUZIkSZIEGBAlSZIkSQUDoiRJkiQJMCBKkiRJkgoGREmSJEkSYECUJEmSJBUMiJIkSZIkwIAoSZIkSSoYECVJkiRJgAFRkiRJklQwIEqSJEmSAAOiJEmSJKlgQJQkSZIkAQZESZIkSVLBgChJkiRJAgyIAkZGRli9ejXbtm0ruxRJkiRJJTIgimq1ysaNG6lWq2WXIkmSJKlEBsQ2NzIywsDAAJnJwMCAo4iSJElSGzMgtrlqtUpmAjA2NuYooiRJktTGDIhtbnBwkNHRUQBGR0dZv359yRVJkiRJKosBsc319fXR1dUFQFdXFytXriy5IkmSJEllMSC2uUqlQkQA0NHRQaVSKbkiSZIkSWUxILa57u5u+vv7iQj6+/tZvHhx2SVJkiRJKsmCsgtQ+SqVCps2bXL0UJIkSWpzBkTR3d3N2rVryy5DkiRJUsmcYipJkiRJAgyIkiRJkqRCXQNiRDw7Iq6KiO9GxN0R8dKIOCwiBiPinuL+0Amvf19EDEXE9yLi9An9J0XE7cVza6JYdjMi9o+IK4r+myJiWT0/jyRJkiS1snqPIH4c+FJm/hLwAuBu4L3AdZm5AriuaBMRJwCrgOcBZwCfjIjOYj8XA2cDK4rbGUX/WcAjmbkc+BjwkTp/HkmSJElqWXULiBFxMHAqcClAZj6dmY8CZwLV4mVV4E3F4zOByzNzR2beCwwBJ0fEUcDBmXljZibw6SnbjO/rKuC08dFFSZIkSdLeqecI4nOBrcA/RMR3IuJTEbEQOCIzNwMU94cXr18K3D9h++Gib2nxeGr/pG0ycyfwGOCF/CRJkiRpH9QzIC4AXgxcnJkvAp6gmE66G9ON/OUM/TNtM3nHEWdHxIaI2LB169aZq5YkSZKkNlXPgDgMDGfmTUX7KmqB8aFi2ijF/ZYJr3/OhO17gAeK/p5p+idtExELgEOAh6cWkpmXZGZvZvYuWbJkDj6aJEmSJLWeugXEzHwQuD8ifrHoOg24C7gGqBR9FeDq4vE1wKpiZdLjqC1Gc3MxDXV7RJxSnF/49inbjO/rzcBXivMUJUmSJEl7aUGd978auCwi9gP+E/htaqH0yog4C7gPeAtAZt4ZEVdSC5E7gXdm5q5iP+8A/hE4EBgoblBbAOczETFEbeRwVZ0/jyRJkiS1rGi3Abfe3t7csGFD2WVIkiRJUiki4pbM7J3uuXpfB1GSJEmS1CQMiJIkSZIkwIAoSZIkSSoYECVJkiRJgAFRkiRJklQwIIqRkRFWr17Ntm3byi5FkiRJUokMiKJarbJx40aq1WrZpUiSJEkqkQGxzY2MjDAwMEBmMjAw4CiiJEmS1MYMiG2uWq2SmQCMjY05iihJkiS1MQNimxscHGR0dBSA0dFR1q9fX3JFkiRJkspiQGxzfX19dHV1AdDV1cXKlStLrkiSJElSWQyIba5SqRARAHR0dFCpVEquSJIkSVJZDIhtrru7m/7+fiKC/v5+Fi9eXHZJkiRJkkqyoOwCVL5KpcKmTZscPZQkSZLanAFRdHd3s3bt2rLLkCRJklQyp5hKkiRJkgADoiRJkiSpYEAUN998M69+9au55ZZbyi5FkiRJUokMiOKCCy5gbGyMP/uzPyu7FEmSJEklMiC2uZtvvpnHH38cgMcff9xRREmSJKmNGRDb3AUXXDCp7SiiJEmS1L4MiG1ufPRwd21JkiRJ7cOA2OYWLVo0Y1uSJElS+zAgtrmpU0w/+MEPllOIJEmSpNIZENvcySef/Myo4aJFizjppJNKrkiSJElSWQyI4oILLqCjo8PRQ0mSJKnNLSi7AJXv5JNP5vrrry+7DEmSJEklcwRRkiRJkgQYECVJkiRJBQOiJEmSJAkwIEqS6mRkZITVq1ezbdu2skuRJEmzZECUP+Ik1UW1WmXjxo1Uq9WyS5EkSbNkQJQ/4iTNuZGREQYGBshMBgYGPAAlSVKTMCC2OX/ESaqHarVKZgIwNjbmAShJkpqEAbHN+SNOUj0MDg4yOjoKwOjoKOvXry+5IkmSNBsGxDbnjzhJ9dDX10dXVxcAXV1drFy5suSKJEnSbBgQ25w/4iTVQ6VSISIA6OjooFKplFyRJEmaDQNim/NHnKR66O7upr+/n4igv7+fxYsXl12SJEmaBQNim/NHnKR6qVQqnHjiiR54kiSpiSwouwCVr1KpsGnTJn/ESZpT3d3drF27tuwyJEnSXjAgyh9xkiRJkgCnmEqSJEmSCnUNiBGxKSJuj4hbI2JD0XdYRAxGxD3F/aETXv++iBiKiO9FxOkT+k8q9jMUEWuiWFUlIvaPiCuK/psiYlk9P48kSZIktbL5GEH81cx8YWb2Fu33Atdl5grguqJNRJwArAKeB5wBfDIiOottLgbOBlYUtzOK/rOARzJzOfAx4CPz8HkkSZIkqSWVMcX0TKBaPK4Cb5rQf3lm7sjMe4Eh4OSIOAo4ODNvzMwEPj1lm/F9XQWcNj66KEmSJEnaO/UOiAmsj4hbIuLsou+IzNwMUNwfXvQvBe6fsO1w0be0eDy1f9I2mbkTeAzwOg2SJEmStA/qvYrpyzPzgYg4HBiMiO/O8NrpRv5yhv6Ztpm841o4PRvgmGOOmbliSZIkSWpTdR1BzMwHivstwL8CJwMPFdNGKe63FC8fBp4zYfMe4IGiv2ea/knbRMQC4BDg4WnquCQzezOzd8mSJXPz4SRJkiSpxdQtIEbEwoh41vhjYCVwB3ANMH5F9gpwdfH4GmBVsTLpcdQWo7m5mIa6PSJOKc4vfPuUbcb39WbgK8V5ipIkSZKkvVTPKaZHAP9arBmzAPhsZn4pIr4FXBkRZwH3AW8ByMw7I+JK4C5gJ/DOzNxV7OsdwD8CBwIDxQ3gUuAzETFEbeRwVR0/jyRJkiS1tGi3Abfe3t7csGFD2WVIkiRJUiki4pYJlyGcpIzLXEiSJEmSGpABUZIkSZIEGBAlSZIkSQUDoiRJkiQJMCBKkiRJkgoGREmSJEkSYECUJEmSJBUMiJIkSZIkwIAoSZIkSSoYECVJdTEyMsLq1avZtm1b2aVIkqRZMiBKkuqiWq2yceNGqtVq2aVIkqRZMiBKkubcyMgIAwMDZCYDAwOOIkqS1CQMiJKkOVetVslMAMbGxhxFlCSpSRgQJUlzbnBwkNHRUQBGR0dZv359yRVJkqTZMCBKkuZcX18fXV1dAHR1dbFy5cqSK5IkSbNhQJQkzblKpUJEANDR0UGlUim5IkmSNBsGREnSnOvu7qa/v5+IoL+/n8WLF5ddkiRJmoUFZRcgSWpNlUqFTZs2OXooSVITMSBKkuqiu7ubtWvXll2GJEnaC04xlSRJkiQBBkRJkiRJUsGAKEmSJEkCDIiSJEmSpIIBUZIkSZIEGBAlSZIkSQUDoiRJkiQJMCBKkiRJkgoGREmSJEkSYECUJEmSJBUMiJIkSZIkwIAoSZIkSSoYECVJkiRJgAFRkiRJklSYVUCMiOMj4rqIuKNonxgR59W3NEmSJEnSfJrtCOLfAe8DRgEycyOwql5FSZIkSZLm32wD4kGZefOUvp1zXYwkSZIkqTyzDYgjEfELQAJExJuBzXWrSpIkSZI07xbM8nXvBC4BfikifgTcC/xW3aqSJEmSJM27WQXEzPxP4NciYiHQkZnb61uWJEmSJGm+zXYV07+IiGdn5hOZuT0iDo2Ii+pdnCRJkiRp/sz2HMT+zHx0vJGZjwCvrUtFkiRJkqRSzDYgdkbE/uONiDgQ2H+G10uSJEmSmsxsA+I/AddFxFkR8TvAIFCdzYYR0RkR34mILxTtwyJiMCLuKe4PnfDa90XEUER8LyJOn9B/UkTcXjy3JiKi6N8/Iq4o+m+KiGWz/DySJEmSpClmFRAz8y+BDwG/DDwP+GDRNxvvAu6e0H4vcF1mrgCuK9pExAnAqmL/ZwCfjIjOYpuLgbOBFcXtjKL/LOCRzFwOfAz4yCxrkiRJkiRNMdsRRDJzIDP/ODP/KDO/PJttIqIHeB3wqQndZ/LT0ccq8KYJ/Zdn5o7MvBcYAk6OiKOAgzPzxsxM4NNTthnf11XAaeOji5IkSZKkvTNjQIyIfy/ut0fEjyfctkfEj2ex//8N/L/A2IS+IzJzM0Bxf3jRvxS4f8Lrhou+pcXjqf2TtsnMncBjwOJZ1CVJkiRJmmLGgJiZryjun5WZB0+4PSszD55p24h4PbAlM2+ZZS3TjfzlDP0zbTO1lrMjYkNEbNi6dessy5EkSZKk9rLHKaYR0RERd+zDvl8OvDEiNgGXA6+JiH8CHiqmjVLcbylePww8Z8L2PcADRX/PNP2TtomIBcAhwMNTC8nMSzKzNzN7lyxZsg8fRZIkSZJa3x4DYmaOAbdFxDF7s+PMfF9m9mTmMmqLz3wlM38LuAaoFC+rAFcXj68BVhUrkx5HbTGam4tpqNsj4pTi/MK3T9lmfF9vLt7jZ0YQJUmSJEl7tmCWrzsKuDMibgaeGO/MzDfuw3t+GLgyIs4C7gPeUuzrzoi4ErgL2Am8MzN3Fdu8A/hH4EBgoLgBXAp8JiKGqI0crtqHeiRJkiRJQMxmwC0iXjVdf2Z+bc4rqrPe3t7csGFD2WVIkiRJUiki4pbM7J3uuRlHECPiAOD3geXA7cClxWqhkiRJkqQWs6dzEKtAL7Vw2A/8dd0rkiRJkiSVYk/nIJ6Qmb8CEBGXAjfXvyRJkiRJUhn2NII4Ov7AqaWSJEmS1Nr2NIL4goj4cfE4gAOLdgCZmQfXtTpJkiRJ0ryZMSBmZud8FSJJkiRJKteepphKkrRPRkZGWL16Ndu2bSu7FEmSNEsGRElSXVSrVTZu3Ei1Wi27FEmSNEsGREnSnBsZGWFgYIDMZGBgwFFESZKahAFRkjTnqtUqmQnA2NiYo4iSJDUJA6L4/ve/T39/P0NDQ2WXIqlFDA4OMjpau1LS6Ogo69evL7kiSZI0GwZEcdFFF/HEE09w4YUXll2KpBbR19dHV1cXAF1dXaxcubLkiiRJ0mwYENvc97//fTZt2gTApk2bHEWUNCcqlQoRAUBHRweVSqXkiiRJ0mwYENvcRRddNKntKKKkudDd3U1/fz8RQX9/P4sXLy67JEmSNAsLyi5A5RofPdxdW5L2VaVSYdOmTY4eSpLURBxBbHPLli2bsS1J+6q7u5u1a9c6eihJUhMxILa58847b1L7/PPPL6kSSZIkSWUzILa5ww47bFL70EMPLakSSZIkSWUzILa5arVKZ2cnAJ2dnV7MWtKcGRkZYfXq1Wzbtq3sUiRJ0iwZENvc4OAgu3btAmDXrl1ezFrSnFm3bh233XYb69atK7sUSZI0SwbENufFrCXVw8jICIODgwCsX7/eUURJkpqEAbHNeTFrSfWwbt06xsbGABgbG3MUUZKkJmFAbHNezFpSPVx77bWT2uOjiZIkqbEtKLsAlc+LWUuaa+Ojh7trS5KkxmRA1DMXs5akuRIRZOaktiRJanxOMZUkzbm+vr5JbRfAkiSpORgQJUlz7pxzznlm1DAiOOecc0quSJIkzYYBUZI057q7u58ZNTz99NNdAEuSpCbhOYiSpLo455xzePDBBx09lCSpiRgQJUl14QJYkiQ1H6eYSpIkSZIAA6IkSZIkqWBAFOvWrePUU0/l0ksvLbsUNbiRkRFWr17Ntm3byi5FkiRJdWBAFJdddhkA1Wq15ErU6KrVKhs3bvS7IkmS1KIMiG1u3bp1k9qOImp3RkZGGBgYIDMZGBhwFFGSJKkFGRDb3Pjo4ThHhrQ71WqVzARgbGzM74okSVILMiBKmpXBwUFGR0cBGB0dZf369SVXJEmSpLlmQJQ0K319fXR1dQHQ1dXFypUrS65IkiRJc82A2Obe9ra3TWpXKpWSKlGjq1QqRAQAHR0dflckSZJakAGxzZ1zzjmT2meddVZJlajRdXd309/fT0TQ39/P4sWLyy5JkiRJc8yAqGdGER0R0p5UKhVOPPFEvyuSJEktKsZXJWwXvb29uWHDhrLLkCRJkqRSRMQtmdk73XN1G0GMiAMi4uaIuC0i7oyIPy/6D4uIwYi4p7g/dMI274uIoYj4XkScPqH/pIi4vXhuTRQnQkXE/hFxRdF/U0Qsq9fnkSRJkqRWV88ppjuA12TmC4AXAmdExCnAe4HrMnMFcF3RJiJOAFYBzwPOAD4ZEZ3Fvi4GzgZWFLcziv6zgEcycznwMeAjdfw8kiRJktTS6hYQs+bxotlV3BI4Exi/wnYVeFPx+Ezg8szckZn3AkPAyRFxFHBwZt6Ytfmwn56yzfi+rgJOGx9dlCSVa2RkhNWrV7Nt27ayS5EkSbNU10VqIqIzIm4FtgCDmXkTcERmbgYo7g8vXr4UuH/C5sNF39Li8dT+Sdtk5k7gMcClFSWpAVSrVTZu3Ei1Wt3ziyVJUkOoa0DMzF2Z+UKgh9po4PNnePl0I385Q/9M20zeccTZEbEhIjZs3bp1D1VLkn5eIyMjDAwMkJkMDAw4iihJUpOYl8tcZOajwPXUzh18qJg2SnG/pXjZMPCcCZv1AA8U/T3T9E/aJiIWAIcAD0/z/pdkZm9m9i5ZsmRuPpQkabeq1Srjq2SPjY05iihJUpOo5yqmSyLi2cXjA4FfA74LXAOMX0StAlxdPL4GWFWsTHoctcVobi6moW6PiFOK8wvfPmWb8X29GfhKttt1OySpAQ0ODjI6OgrA6Ogo69evL7kiSZI0G/UcQTwK+GpEbAS+Re0cxC8AHwb6IuIeoK9ok5l3AlcCdwFfAt6ZmbuKfb0D+BS1hWt+AAwU/ZcCiyNiCHgPxYqokqRy9fX10dXVBUBXVxcrV64suSJJkjQb0W4Dbr29vblhw4ayy5CkljYyMsKqVat4+umn2W+//bjiiitYvNg1xCRJagQRcUtm9k733Lycg6jG5lL0kuZad3c3Rx99NABHH3204VCSpCZhQBTnnnsut912G+9617vKLkVSixgZGeFHP/oRAA888IAHoCRJahIGxDY3MjLC8HDtMpP33XefP+IkzYmJq5ZmpquYSpLUJAyIbe7cc8+d1HYUUdJccBVTSZKakwGxzY2PHo677777SqpEUivp6+ujs7MTgM7OTlcxlSSpSRgQJUlzrlKpsGtX7UpFu3btolKp7GELSZLUCAyIkqQ59/DDD09qP/LIIyVVIkmS9oYBsc297GUvm9Q+9dRTS6pEUiu56KKLJrUvvPDCkiqRJEl7w4DY5r75zW9Oat9www0lVSKplWzatGnGtiRJakwGREnSnFu2bNmMbUmS1JgMiJKkOXfeeedNap9//vklVSJJkvaGAVGSNOeOP/74Z0YNly1bxvLly8stSJIkzYoBUZJUF+eddx4LFy509FCSpCayoOwCVK6jjjqKzZs3P9M++uijS6xGUis5/vjjGRgYKLsMSZK0FxxBbHMTwyHAAw88UFIlkiRJkspmQJQkSZLUckZGRli9ejXbtm0ru5SmYkCUJEmS1HKq1SobN26kWq2WXUpTMSBKkiRJaikjIyMMDAyQmQwMDDiKuBcMiJKkunBqjySpLNVqlcwEYGxszFHEvWBAbHPj1ynbXVuS9tW6deu47bbbWLduXdmlSJLazODgIKOjowCMjo6yfv36kitqHgbENnfeeedNanu9MklzYWRkhMHBQQDWr1/vKKIkaV719fXR2dkJQGdnJytXriy5ouZhQGxzxx9//DOjhsuWLWP58uXlFiSpJaxbt46xsTGgNrXHUURJ0nyqVCrs2rULgF27dlGpVEquqHkYEMV5553HwoULHT2UNGeuvfbaSe3x0URJkubDww8/PKn9yCOPlFRJ8zEgiuOPP56BgQFHDyVJktQSLrrookntCy+8sKRKmo8BUZI0544++ugZ25Ik1dOmTZtmbGv3DIiSpDm3ZcuWGduSJNXTwoULZ2xr9xaUXYB+1po1axgaGpq39xseHgagp6dn3t5z+fLlnHvuufP2fpLmV1dXFzt27JjUliRpvjz11FMz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\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize']=[15,8]\n",
    "sns.boxplot(x='Destination',y='Price',data=f)\n",
    "plt.xticks(rotation=90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2403fac7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['24/03/2019', '1/05/2019', '9/06/2019', '12/05/2019', '01/03/2019',\n",
       "       '24/06/2019', '12/03/2019', '27/05/2019', '1/06/2019',\n",
       "       '18/04/2019', '9/05/2019', '24/04/2019', '3/03/2019', '15/04/2019',\n",
       "       '12/06/2019', '6/03/2019', '21/03/2019', '3/04/2019', '6/05/2019',\n",
       "       '15/05/2019', '18/06/2019', '15/06/2019', '6/04/2019',\n",
       "       '18/05/2019', '27/06/2019', '21/05/2019', '06/03/2019',\n",
       "       '3/06/2019', '15/03/2019', '3/05/2019', '9/03/2019', '6/06/2019',\n",
       "       '24/05/2019', '09/03/2019', '1/04/2019', '21/04/2019',\n",
       "       '21/06/2019', '27/03/2019', '18/03/2019', '12/04/2019',\n",
       "       '9/04/2019', '1/03/2019', '03/03/2019', '27/04/2019'], dtype=object)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f.Date_of_Journey.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0c83abc0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-03-24</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>22:20</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>05:50</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>2019-09-06</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>09:25</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-12-05</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>18:05</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>16:50</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2666</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2019-06-06</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>20:30</td>\n",
       "      <td>20:25 07 Jun</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2667</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-03-27</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>14:20</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2668</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>2019-06-03</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>21:50</td>\n",
       "      <td>04:25 07 Mar</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2669</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2019-06-03</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:00</td>\n",
       "      <td>19:15</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2670</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>2019-06-15</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:55</td>\n",
       "      <td>19:15</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Airline Date_of_Journey    Source Destination Dep_Time  \\\n",
       "0                IndiGo      2019-03-24  Banglore   New Delhi    22:20   \n",
       "1             Air India      2019-01-05   Kolkata    Banglore    05:50   \n",
       "2           Jet Airways      2019-09-06     Delhi      Cochin    09:25   \n",
       "3                IndiGo      2019-12-05   Kolkata    Banglore    18:05   \n",
       "4                IndiGo      2019-01-03  Banglore   New Delhi    16:50   \n",
       "...                 ...             ...       ...         ...      ...   \n",
       "2666          Air India      2019-06-06   Kolkata    Banglore    20:30   \n",
       "2667             IndiGo      2019-03-27   Kolkata    Banglore    14:20   \n",
       "2668        Jet Airways      2019-06-03     Delhi      Cochin    21:50   \n",
       "2669          Air India      2019-06-03     Delhi      Cochin    04:00   \n",
       "2670  Multiple carriers      2019-06-15     Delhi      Cochin    04:55   \n",
       "\n",
       "      Arrival_Time Duration Total_Stops Additional_Info    Price  Month  \n",
       "0     01:10 22 Mar   2h 50m    non-stop         No info   3897.0      3  \n",
       "1            13:15   7h 25m     2 stops         No info   7662.0      1  \n",
       "2     04:25 10 Jun      19h     2 stops         No info  13882.0      9  \n",
       "3            23:30   5h 25m      1 stop         No info   6218.0     12  \n",
       "4            21:35   4h 45m      1 stop         No info  13302.0      1  \n",
       "...            ...      ...         ...             ...      ...    ...  \n",
       "2666  20:25 07 Jun  23h 55m      1 stop         No info      NaN      6  \n",
       "2667         16:55   2h 35m    non-stop         No info      NaN      3  \n",
       "2668  04:25 07 Mar   6h 35m      1 stop         No info      NaN      6  \n",
       "2669         19:15  15h 15m      1 stop         No info      NaN      6  \n",
       "2670         19:15  14h 20m      1 stop         No info      NaN      6  \n",
       "\n",
       "[13354 rows x 11 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "f.Date_of_Journey=pd.to_datetime(f.Date_of_Journey)\n",
    "f[\"Month\"]=f.Date_of_Journey.dt.month\n",
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "28a0932b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Month',y='Price',data=f)\n",
    "plt.xticks(rotation=90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "004c24f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-03-24</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>22:20</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>05:50</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>2019-09-06</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>09:25</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-12-05</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>18:05</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>16:50</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2666</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2019-06-06</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>20:30</td>\n",
       "      <td>20:25 07 Jun</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2667</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2019-03-27</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>14:20</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2668</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>2019-06-03</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>21:50</td>\n",
       "      <td>04:25 07 Mar</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2669</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2019-06-03</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:00</td>\n",
       "      <td>19:15</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2670</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>2019-06-15</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:55</td>\n",
       "      <td>19:15</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Airline Date_of_Journey    Source Destination Dep_Time  \\\n",
       "0                IndiGo      2019-03-24  Banglore   New Delhi    22:20   \n",
       "1             Air India      2019-01-05   Kolkata    Banglore    05:50   \n",
       "2           Jet Airways      2019-09-06     Delhi      Cochin    09:25   \n",
       "3                IndiGo      2019-12-05   Kolkata    Banglore    18:05   \n",
       "4                IndiGo      2019-01-03  Banglore   New Delhi    16:50   \n",
       "...                 ...             ...       ...         ...      ...   \n",
       "2666          Air India      2019-06-06   Kolkata    Banglore    20:30   \n",
       "2667             IndiGo      2019-03-27   Kolkata    Banglore    14:20   \n",
       "2668        Jet Airways      2019-06-03     Delhi      Cochin    21:50   \n",
       "2669          Air India      2019-06-03     Delhi      Cochin    04:00   \n",
       "2670  Multiple carriers      2019-06-15     Delhi      Cochin    04:55   \n",
       "\n",
       "      Arrival_Time Duration Total_Stops Additional_Info    Price  Month  \n",
       "0     01:10 22 Mar   2h 50m    non-stop         No info   3897.0      3  \n",
       "1            13:15   7h 25m     2 stops         No info   7662.0      1  \n",
       "2     04:25 10 Jun      19h     2 stops         No info  13882.0      9  \n",
       "3            23:30   5h 25m      1 stop         No info   6218.0     12  \n",
       "4            21:35   4h 45m      1 stop         No info  13302.0      1  \n",
       "...            ...      ...         ...             ...      ...    ...  \n",
       "2666  20:25 07 Jun  23h 55m      1 stop         No info      NaN      6  \n",
       "2667         16:55   2h 35m    non-stop         No info      NaN      3  \n",
       "2668  04:25 07 Mar   6h 35m      1 stop         No info      NaN      6  \n",
       "2669         19:15  15h 15m      1 stop         No info      NaN      6  \n",
       "2670         19:15  14h 20m      1 stop         No info      NaN      6  \n",
       "\n",
       "[13354 rows x 11 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "019cfd64",
   "metadata": {},
   "outputs": [],
   "source": [
    "b=[]\n",
    "for i in range(len(f['Dep_Time'])):\n",
    "    a=f.iloc[i,4][0:2]\n",
    "    b.append(a)\n",
    "f['Dep_Time']=b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fa208649",
   "metadata": {},
   "outputs": [],
   "source": [
    "f.drop('Date_of_Journey',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b0d36f03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>22</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>05</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>09</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>18</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>16</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2666</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>20</td>\n",
       "      <td>20:25 07 Jun</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2667</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>14</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2668</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>21</td>\n",
       "      <td>04:25 07 Mar</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2669</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04</td>\n",
       "      <td>19:15</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2670</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04</td>\n",
       "      <td>19:15</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Airline    Source Destination Dep_Time  Arrival_Time Duration  \\\n",
       "0                IndiGo  Banglore   New Delhi       22  01:10 22 Mar   2h 50m   \n",
       "1             Air India   Kolkata    Banglore       05         13:15   7h 25m   \n",
       "2           Jet Airways     Delhi      Cochin       09  04:25 10 Jun      19h   \n",
       "3                IndiGo   Kolkata    Banglore       18         23:30   5h 25m   \n",
       "4                IndiGo  Banglore   New Delhi       16         21:35   4h 45m   \n",
       "...                 ...       ...         ...      ...           ...      ...   \n",
       "2666          Air India   Kolkata    Banglore       20  20:25 07 Jun  23h 55m   \n",
       "2667             IndiGo   Kolkata    Banglore       14         16:55   2h 35m   \n",
       "2668        Jet Airways     Delhi      Cochin       21  04:25 07 Mar   6h 35m   \n",
       "2669          Air India     Delhi      Cochin       04         19:15  15h 15m   \n",
       "2670  Multiple carriers     Delhi      Cochin       04         19:15  14h 20m   \n",
       "\n",
       "     Total_Stops Additional_Info    Price  Month  \n",
       "0       non-stop         No info   3897.0      3  \n",
       "1        2 stops         No info   7662.0      1  \n",
       "2        2 stops         No info  13882.0      9  \n",
       "3         1 stop         No info   6218.0     12  \n",
       "4         1 stop         No info  13302.0      1  \n",
       "...          ...             ...      ...    ...  \n",
       "2666      1 stop         No info      NaN      6  \n",
       "2667    non-stop         No info      NaN      3  \n",
       "2668      1 stop         No info      NaN      6  \n",
       "2669      1 stop         No info      NaN      6  \n",
       "2670      1 stop         No info      NaN      6  \n",
       "\n",
       "[13354 rows x 10 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "213f58b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Dep_Time', ylabel='Price'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Dep_Time',y='Price',data=f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "22e8abbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "f['Dep_Time']=f['Dep_Time'].astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3dc77093",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13354 entries, 0 to 2670\n",
      "Data columns (total 10 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Airline          13354 non-null  object \n",
      " 1   Source           13354 non-null  object \n",
      " 2   Destination      13354 non-null  object \n",
      " 3   Dep_Time         13354 non-null  int32  \n",
      " 4   Arrival_Time     13354 non-null  object \n",
      " 5   Duration         13354 non-null  object \n",
      " 6   Total_Stops      13353 non-null  object \n",
      " 7   Additional_Info  13354 non-null  object \n",
      " 8   Price            10683 non-null  float64\n",
      " 9   Month            13354 non-null  int64  \n",
      "dtypes: float64(1), int32(1), int64(1), object(7)\n",
      "memory usage: 1.6+ MB\n"
     ]
    }
   ],
   "source": [
    "f.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b23e7b49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>22</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>5</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>9</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>18</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>16</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2666</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>20</td>\n",
       "      <td>20:25 07 Jun</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2667</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>14</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2668</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>21</td>\n",
       "      <td>04:25 07 Mar</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2669</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>4</td>\n",
       "      <td>19:15</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2670</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>4</td>\n",
       "      <td>19:15</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Airline    Source Destination  Dep_Time  Arrival_Time  \\\n",
       "0                IndiGo  Banglore   New Delhi        22  01:10 22 Mar   \n",
       "1             Air India   Kolkata    Banglore         5         13:15   \n",
       "2           Jet Airways     Delhi      Cochin         9  04:25 10 Jun   \n",
       "3                IndiGo   Kolkata    Banglore        18         23:30   \n",
       "4                IndiGo  Banglore   New Delhi        16         21:35   \n",
       "...                 ...       ...         ...       ...           ...   \n",
       "2666          Air India   Kolkata    Banglore        20  20:25 07 Jun   \n",
       "2667             IndiGo   Kolkata    Banglore        14         16:55   \n",
       "2668        Jet Airways     Delhi      Cochin        21  04:25 07 Mar   \n",
       "2669          Air India     Delhi      Cochin         4         19:15   \n",
       "2670  Multiple carriers     Delhi      Cochin         4         19:15   \n",
       "\n",
       "     Duration Total_Stops Additional_Info    Price  Month  \n",
       "0      2h 50m    non-stop         No info   3897.0      3  \n",
       "1      7h 25m     2 stops         No info   7662.0      1  \n",
       "2         19h     2 stops         No info  13882.0      9  \n",
       "3      5h 25m      1 stop         No info   6218.0     12  \n",
       "4      4h 45m      1 stop         No info  13302.0      1  \n",
       "...       ...         ...             ...      ...    ...  \n",
       "2666  23h 55m      1 stop         No info      NaN      6  \n",
       "2667   2h 35m    non-stop         No info      NaN      3  \n",
       "2668   6h 35m      1 stop         No info      NaN      6  \n",
       "2669  15h 15m      1 stop         No info      NaN      6  \n",
       "2670  14h 20m      1 stop         No info      NaN      6  \n",
       "\n",
       "[13354 rows x 10 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a48144b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "            \n",
    "def time(x):\n",
    "    if x > 13 :\n",
    "        return 'Evening'\n",
    "    elif (x > 5 and x <=13):\n",
    "        return 'morning'\n",
    "    elif x <=5:\n",
    "        return 'midnight'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "47976cd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "f['Flight_time']=f['Dep_Time'].apply(time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b0efd36e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Month</th>\n",
       "      <th>Flight_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>22</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>5</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>1</td>\n",
       "      <td>midnight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>9</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>9</td>\n",
       "      <td>morning</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>18</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>12</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>16</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2666</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>20</td>\n",
       "      <td>20:25 07 Jun</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2667</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>14</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2668</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>21</td>\n",
       "      <td>04:25 07 Mar</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2669</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>4</td>\n",
       "      <td>19:15</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>midnight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2670</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>4</td>\n",
       "      <td>19:15</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>midnight</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Airline    Source Destination  Dep_Time  Arrival_Time  \\\n",
       "0                IndiGo  Banglore   New Delhi        22  01:10 22 Mar   \n",
       "1             Air India   Kolkata    Banglore         5         13:15   \n",
       "2           Jet Airways     Delhi      Cochin         9  04:25 10 Jun   \n",
       "3                IndiGo   Kolkata    Banglore        18         23:30   \n",
       "4                IndiGo  Banglore   New Delhi        16         21:35   \n",
       "...                 ...       ...         ...       ...           ...   \n",
       "2666          Air India   Kolkata    Banglore        20  20:25 07 Jun   \n",
       "2667             IndiGo   Kolkata    Banglore        14         16:55   \n",
       "2668        Jet Airways     Delhi      Cochin        21  04:25 07 Mar   \n",
       "2669          Air India     Delhi      Cochin         4         19:15   \n",
       "2670  Multiple carriers     Delhi      Cochin         4         19:15   \n",
       "\n",
       "     Duration Total_Stops Additional_Info    Price  Month Flight_time  \n",
       "0      2h 50m    non-stop         No info   3897.0      3     Evening  \n",
       "1      7h 25m     2 stops         No info   7662.0      1    midnight  \n",
       "2         19h     2 stops         No info  13882.0      9     morning  \n",
       "3      5h 25m      1 stop         No info   6218.0     12     Evening  \n",
       "4      4h 45m      1 stop         No info  13302.0      1     Evening  \n",
       "...       ...         ...             ...      ...    ...         ...  \n",
       "2666  23h 55m      1 stop         No info      NaN      6     Evening  \n",
       "2667   2h 35m    non-stop         No info      NaN      3     Evening  \n",
       "2668   6h 35m      1 stop         No info      NaN      6     Evening  \n",
       "2669  15h 15m      1 stop         No info      NaN      6    midnight  \n",
       "2670  14h 20m      1 stop         No info      NaN      6    midnight  \n",
       "\n",
       "[13354 rows x 11 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1010ca15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "morning     6088\n",
       "Evening     5918\n",
       "midnight    1348\n",
       "Name: Flight_time, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f['Flight_time'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "42e68a2c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "f.drop('Dep_Time',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "da76dd05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Flight_time', ylabel='Price'>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Flight_time',y='Price',data=f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "746ab11a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No info                         10493\n",
       "In-flight meal not included      2426\n",
       "No check-in baggage included      396\n",
       "1 Long layover                     20\n",
       "Change airports                     8\n",
       "Business class                      5\n",
       "No Info                             3\n",
       "1 Short layover                     1\n",
       "Red-eye flight                      1\n",
       "2 Long layover                      1\n",
       "Name: Additional_Info, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f.Additional_Info.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c0022939",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Additional_Info',y='Price',data=f)\n",
    "plt.xticks(rotation=90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fdab9da1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>0.238580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>0.206380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>0.191928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>0.132470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0.101018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12</td>\n",
       "      <td>0.090909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4</td>\n",
       "      <td>0.038715</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index     Month\n",
       "0      6  0.238580\n",
       "1      3  0.206380\n",
       "2      5  0.191928\n",
       "3      9  0.132470\n",
       "4      1  0.101018\n",
       "5     12  0.090909\n",
       "6      4  0.038715"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq=pd.DataFrame(f.Month.value_counts()/f.Month.value_counts().sum()).reset_index()\n",
    "freq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "2b4a70ab",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "freq.rename(columns={\"index\":\"Month\", \"Month\":\"percent\"}, inplace = True)\n",
    "f_new=pd.merge(f, freq, on = \"Month\", how = \"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "aa86f41a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Month</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>1</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>9</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>12</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>20:25 07 Jun</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:25 07 Mar</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>19:15</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>19:15</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline    Source Destination  Arrival_Time Duration  \\\n",
       "0                 IndiGo  Banglore   New Delhi  01:10 22 Mar   2h 50m   \n",
       "1              Air India   Kolkata    Banglore         13:15   7h 25m   \n",
       "2            Jet Airways     Delhi      Cochin  04:25 10 Jun      19h   \n",
       "3                 IndiGo   Kolkata    Banglore         23:30   5h 25m   \n",
       "4                 IndiGo  Banglore   New Delhi         21:35   4h 45m   \n",
       "...                  ...       ...         ...           ...      ...   \n",
       "13349          Air India   Kolkata    Banglore  20:25 07 Jun  23h 55m   \n",
       "13350             IndiGo   Kolkata    Banglore         16:55   2h 35m   \n",
       "13351        Jet Airways     Delhi      Cochin  04:25 07 Mar   6h 35m   \n",
       "13352          Air India     Delhi      Cochin         19:15  15h 15m   \n",
       "13353  Multiple carriers     Delhi      Cochin         19:15  14h 20m   \n",
       "\n",
       "      Total_Stops Additional_Info    Price  Month Flight_time   percent  \n",
       "0        non-stop         No info   3897.0      3     Evening  0.206380  \n",
       "1         2 stops         No info   7662.0      1    midnight  0.101018  \n",
       "2         2 stops         No info  13882.0      9     morning  0.132470  \n",
       "3          1 stop         No info   6218.0     12     Evening  0.090909  \n",
       "4          1 stop         No info  13302.0      1     Evening  0.101018  \n",
       "...           ...             ...      ...    ...         ...       ...  \n",
       "13349      1 stop         No info      NaN      6     Evening  0.238580  \n",
       "13350    non-stop         No info      NaN      3     Evening  0.206380  \n",
       "13351      1 stop         No info      NaN      6     Evening  0.238580  \n",
       "13352      1 stop         No info      NaN      6    midnight  0.238580  \n",
       "13353      1 stop         No info      NaN      6    midnight  0.238580  \n",
       "\n",
       "[13354 rows x 11 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7ffafa5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "f_new['Destination']=np.where(f_new.Destination=='Delhi','New Delhi',f_new.Destination)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e2255615",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cochin       5682\n",
       "Banglore     3581\n",
       "New Delhi    2752\n",
       "Hyderabad     883\n",
       "Kolkata       456\n",
       "Name: Destination, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new['Destination'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "85fdf0ce",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Month</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>1</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>9</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>12</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>20:25 07 Jun</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:25 07 Mar</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>19:15</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>19:15</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline    Source Destination  Arrival_Time Duration  \\\n",
       "0                 IndiGo  Banglore   New Delhi  01:10 22 Mar   2h 50m   \n",
       "1              Air India   Kolkata    Banglore         13:15   7h 25m   \n",
       "2            Jet Airways     Delhi      Cochin  04:25 10 Jun      19h   \n",
       "3                 IndiGo   Kolkata    Banglore         23:30   5h 25m   \n",
       "4                 IndiGo  Banglore   New Delhi         21:35   4h 45m   \n",
       "...                  ...       ...         ...           ...      ...   \n",
       "13349          Air India   Kolkata    Banglore  20:25 07 Jun  23h 55m   \n",
       "13350             IndiGo   Kolkata    Banglore         16:55   2h 35m   \n",
       "13351        Jet Airways     Delhi      Cochin  04:25 07 Mar   6h 35m   \n",
       "13352          Air India     Delhi      Cochin         19:15  15h 15m   \n",
       "13353  Multiple carriers     Delhi      Cochin         19:15  14h 20m   \n",
       "\n",
       "      Total_Stops Additional_Info    Price  Month Flight_time   percent  \\\n",
       "0        non-stop         No info   3897.0      3     Evening  0.206380   \n",
       "1         2 stops         No info   7662.0      1    midnight  0.101018   \n",
       "2         2 stops         No info  13882.0      9     morning  0.132470   \n",
       "3          1 stop         No info   6218.0     12     Evening  0.090909   \n",
       "4          1 stop         No info  13302.0      1     Evening  0.101018   \n",
       "...           ...             ...      ...    ...         ...       ...   \n",
       "13349      1 stop         No info      NaN      6     Evening  0.238580   \n",
       "13350    non-stop         No info      NaN      3     Evening  0.206380   \n",
       "13351      1 stop         No info      NaN      6     Evening  0.238580   \n",
       "13352      1 stop         No info      NaN      6    midnight  0.238580   \n",
       "13353      1 stop         No info      NaN      6    midnight  0.238580   \n",
       "\n",
       "                      Dist  \n",
       "0      BangloretoNew Delhi  \n",
       "1        KolkatatoBanglore  \n",
       "2            DelhitoCochin  \n",
       "3        KolkatatoBanglore  \n",
       "4      BangloretoNew Delhi  \n",
       "...                    ...  \n",
       "13349    KolkatatoBanglore  \n",
       "13350    KolkatatoBanglore  \n",
       "13351        DelhitoCochin  \n",
       "13352        DelhitoCochin  \n",
       "13353        DelhitoCochin  \n",
       "\n",
       "[13354 rows x 12 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new['Dist']=f_new['Source'] + 'to' + f_new['Destination']\n",
    "f_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "37b91764",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Month</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>1</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>9</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>12</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>20:25 07 Jun</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>16:55</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>04:25 07 Mar</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>19:15</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>19:15</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline    Source Destination  Arrival_Time Duration  \\\n",
       "0                 IndiGo  Banglore   New Delhi  01:10 22 Mar   2h 50m   \n",
       "1              Air India   Kolkata    Banglore         13:15   7h 25m   \n",
       "2            Jet Airways     Delhi      Cochin  04:25 10 Jun      19h   \n",
       "3                 IndiGo   Kolkata    Banglore         23:30   5h 25m   \n",
       "4                 IndiGo  Banglore   New Delhi         21:35   4h 45m   \n",
       "...                  ...       ...         ...           ...      ...   \n",
       "13349          Air India   Kolkata    Banglore  20:25 07 Jun  23h 55m   \n",
       "13350             IndiGo   Kolkata    Banglore         16:55   2h 35m   \n",
       "13351        Jet Airways     Delhi      Cochin  04:25 07 Mar   6h 35m   \n",
       "13352          Air India     Delhi      Cochin         19:15  15h 15m   \n",
       "13353  Multiple carriers     Delhi      Cochin         19:15  14h 20m   \n",
       "\n",
       "      Total_Stops Additional_Info    Price  Month Flight_time   percent  \\\n",
       "0        non-stop         No info   3897.0      3     Evening  0.206380   \n",
       "1         2 stops         No info   7662.0      1    midnight  0.101018   \n",
       "2         2 stops         No info  13882.0      9     morning  0.132470   \n",
       "3          1 stop         No info   6218.0     12     Evening  0.090909   \n",
       "4          1 stop         No info  13302.0      1     Evening  0.101018   \n",
       "...           ...             ...      ...    ...         ...       ...   \n",
       "13349      1 stop         No info      NaN      6     Evening  0.238580   \n",
       "13350    non-stop         No info      NaN      3     Evening  0.206380   \n",
       "13351      1 stop         No info      NaN      6     Evening  0.238580   \n",
       "13352      1 stop         No info      NaN      6    midnight  0.238580   \n",
       "13353      1 stop         No info      NaN      6    midnight  0.238580   \n",
       "\n",
       "                      Dist  \n",
       "0      BangloretoNew Delhi  \n",
       "1        KolkatatoBanglore  \n",
       "2            DelhitoCochin  \n",
       "3        KolkatatoBanglore  \n",
       "4      BangloretoNew Delhi  \n",
       "...                    ...  \n",
       "13349    KolkatatoBanglore  \n",
       "13350    KolkatatoBanglore  \n",
       "13351        DelhitoCochin  \n",
       "13352        DelhitoCochin  \n",
       "13353        DelhitoCochin  \n",
       "\n",
       "[13354 rows x 12 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "32505f71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DelhitoCochin          5682\n",
       "KolkatatoBanglore      3581\n",
       "BangloretoNew Delhi    2752\n",
       "MumbaitoHyderabad       883\n",
       "ChennaitoKolkata        456\n",
       "Name: Dist, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new.Dist.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "25fdd676",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\91882\\Anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Dist', ylabel='Price'>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(f_new['Dist'],f_new['Price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "c11b2bc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "f_new.drop(['Source','Destination','Month','Arrival_Time'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "6f92413a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline Duration Total_Stops Additional_Info    Price  \\\n",
       "0                 IndiGo   2h 50m    non-stop         No info   3897.0   \n",
       "1              Air India   7h 25m     2 stops         No info   7662.0   \n",
       "2            Jet Airways      19h     2 stops         No info  13882.0   \n",
       "3                 IndiGo   5h 25m      1 stop         No info   6218.0   \n",
       "4                 IndiGo   4h 45m      1 stop         No info  13302.0   \n",
       "...                  ...      ...         ...             ...      ...   \n",
       "13349          Air India  23h 55m      1 stop         No info      NaN   \n",
       "13350             IndiGo   2h 35m    non-stop         No info      NaN   \n",
       "13351        Jet Airways   6h 35m      1 stop         No info      NaN   \n",
       "13352          Air India  15h 15m      1 stop         No info      NaN   \n",
       "13353  Multiple carriers  14h 20m      1 stop         No info      NaN   \n",
       "\n",
       "      Flight_time   percent                 Dist  \n",
       "0         Evening  0.206380  BangloretoNew Delhi  \n",
       "1        midnight  0.101018    KolkatatoBanglore  \n",
       "2         morning  0.132470        DelhitoCochin  \n",
       "3         Evening  0.090909    KolkatatoBanglore  \n",
       "4         Evening  0.101018  BangloretoNew Delhi  \n",
       "...           ...       ...                  ...  \n",
       "13349     Evening  0.238580    KolkatatoBanglore  \n",
       "13350     Evening  0.206380    KolkatatoBanglore  \n",
       "13351     Evening  0.238580        DelhitoCochin  \n",
       "13352    midnight  0.238580        DelhitoCochin  \n",
       "13353    midnight  0.238580        DelhitoCochin  \n",
       "\n",
       "[13354 rows x 8 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "98ae9a1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "f_new['flight_duration']= f_new.Duration.str.split(\"h\").str[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "be12dbc0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "      <th>flight_duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline Duration Total_Stops Additional_Info    Price  \\\n",
       "0                 IndiGo   2h 50m    non-stop         No info   3897.0   \n",
       "1              Air India   7h 25m     2 stops         No info   7662.0   \n",
       "2            Jet Airways      19h     2 stops         No info  13882.0   \n",
       "3                 IndiGo   5h 25m      1 stop         No info   6218.0   \n",
       "4                 IndiGo   4h 45m      1 stop         No info  13302.0   \n",
       "...                  ...      ...         ...             ...      ...   \n",
       "13349          Air India  23h 55m      1 stop         No info      NaN   \n",
       "13350             IndiGo   2h 35m    non-stop         No info      NaN   \n",
       "13351        Jet Airways   6h 35m      1 stop         No info      NaN   \n",
       "13352          Air India  15h 15m      1 stop         No info      NaN   \n",
       "13353  Multiple carriers  14h 20m      1 stop         No info      NaN   \n",
       "\n",
       "      Flight_time   percent                 Dist flight_duration  \n",
       "0         Evening  0.206380  BangloretoNew Delhi               2  \n",
       "1        midnight  0.101018    KolkatatoBanglore               7  \n",
       "2         morning  0.132470        DelhitoCochin              19  \n",
       "3         Evening  0.090909    KolkatatoBanglore               5  \n",
       "4         Evening  0.101018  BangloretoNew Delhi               4  \n",
       "...           ...       ...                  ...             ...  \n",
       "13349     Evening  0.238580    KolkatatoBanglore              23  \n",
       "13350     Evening  0.206380    KolkatatoBanglore               2  \n",
       "13351     Evening  0.238580        DelhitoCochin               6  \n",
       "13352    midnight  0.238580        DelhitoCochin              15  \n",
       "13353    midnight  0.238580        DelhitoCochin              14  \n",
       "\n",
       "[13354 rows x 9 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3ddef2ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "freq=pd.DataFrame(f_new.flight_duration.value_counts()/f_new.flight_duration.value_counts().sum()).reset_index()\n",
    "freq.rename(columns={\"index\":\"flight_duration\", \"flight_duration\":\"freq\"}, inplace = True)\n",
    "f_new=pd.merge(f_new, freq, on = \"flight_duration\", how = \"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "e3c68a01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>2</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>7</td>\n",
       "      <td>0.044930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>19</td>\n",
       "      <td>0.012581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>5</td>\n",
       "      <td>0.045529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>4</td>\n",
       "      <td>0.020818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>23</td>\n",
       "      <td>0.024787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>2</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>6</td>\n",
       "      <td>0.033099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.025386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>14</td>\n",
       "      <td>0.031751</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline Duration Total_Stops Additional_Info    Price  \\\n",
       "0                 IndiGo   2h 50m    non-stop         No info   3897.0   \n",
       "1              Air India   7h 25m     2 stops         No info   7662.0   \n",
       "2            Jet Airways      19h     2 stops         No info  13882.0   \n",
       "3                 IndiGo   5h 25m      1 stop         No info   6218.0   \n",
       "4                 IndiGo   4h 45m      1 stop         No info  13302.0   \n",
       "...                  ...      ...         ...             ...      ...   \n",
       "13349          Air India  23h 55m      1 stop         No info      NaN   \n",
       "13350             IndiGo   2h 35m    non-stop         No info      NaN   \n",
       "13351        Jet Airways   6h 35m      1 stop         No info      NaN   \n",
       "13352          Air India  15h 15m      1 stop         No info      NaN   \n",
       "13353  Multiple carriers  14h 20m      1 stop         No info      NaN   \n",
       "\n",
       "      Flight_time   percent                 Dist flight_duration      freq  \n",
       "0         Evening  0.206380  BangloretoNew Delhi               2  0.222181  \n",
       "1        midnight  0.101018    KolkatatoBanglore               7  0.044930  \n",
       "2         morning  0.132470        DelhitoCochin              19  0.012581  \n",
       "3         Evening  0.090909    KolkatatoBanglore               5  0.045529  \n",
       "4         Evening  0.101018  BangloretoNew Delhi               4  0.020818  \n",
       "...           ...       ...                  ...             ...       ...  \n",
       "13349     Evening  0.238580    KolkatatoBanglore              23  0.024787  \n",
       "13350     Evening  0.206380    KolkatatoBanglore               2  0.222181  \n",
       "13351     Evening  0.238580        DelhitoCochin               6  0.033099  \n",
       "13352    midnight  0.238580        DelhitoCochin              15  0.025386  \n",
       "13353    midnight  0.238580        DelhitoCochin              14  0.031751  \n",
       "\n",
       "[13354 rows x 10 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a6ed3949",
   "metadata": {},
   "outputs": [],
   "source": [
    "f_new['Additional_Info']=np.where(f_new.Additional_Info=='No Info','No info',f_new.Additional_Info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "62f07fd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>2</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>7</td>\n",
       "      <td>0.044930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>19</td>\n",
       "      <td>0.012581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>5</td>\n",
       "      <td>0.045529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>4</td>\n",
       "      <td>0.020818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>23h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>23</td>\n",
       "      <td>0.024787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>2h 35m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>2</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>6h 35m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>6</td>\n",
       "      <td>0.033099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>15h 15m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.025386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>14h 20m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>14</td>\n",
       "      <td>0.031751</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline Duration Total_Stops Additional_Info    Price  \\\n",
       "0                 IndiGo   2h 50m    non-stop         No info   3897.0   \n",
       "1              Air India   7h 25m     2 stops         No info   7662.0   \n",
       "2            Jet Airways      19h     2 stops         No info  13882.0   \n",
       "3                 IndiGo   5h 25m      1 stop         No info   6218.0   \n",
       "4                 IndiGo   4h 45m      1 stop         No info  13302.0   \n",
       "...                  ...      ...         ...             ...      ...   \n",
       "13349          Air India  23h 55m      1 stop         No info      NaN   \n",
       "13350             IndiGo   2h 35m    non-stop         No info      NaN   \n",
       "13351        Jet Airways   6h 35m      1 stop         No info      NaN   \n",
       "13352          Air India  15h 15m      1 stop         No info      NaN   \n",
       "13353  Multiple carriers  14h 20m      1 stop         No info      NaN   \n",
       "\n",
       "      Flight_time   percent                 Dist flight_duration      freq  \n",
       "0         Evening  0.206380  BangloretoNew Delhi               2  0.222181  \n",
       "1        midnight  0.101018    KolkatatoBanglore               7  0.044930  \n",
       "2         morning  0.132470        DelhitoCochin              19  0.012581  \n",
       "3         Evening  0.090909    KolkatatoBanglore               5  0.045529  \n",
       "4         Evening  0.101018  BangloretoNew Delhi               4  0.020818  \n",
       "...           ...       ...                  ...             ...       ...  \n",
       "13349     Evening  0.238580    KolkatatoBanglore              23  0.024787  \n",
       "13350     Evening  0.206380    KolkatatoBanglore               2  0.222181  \n",
       "13351     Evening  0.238580        DelhitoCochin               6  0.033099  \n",
       "13352    midnight  0.238580        DelhitoCochin              15  0.025386  \n",
       "13353    midnight  0.238580        DelhitoCochin              14  0.031751  \n",
       "\n",
       "[13354 rows x 10 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "0b887fd7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No info                         10496\n",
       "In-flight meal not included      2426\n",
       "No check-in baggage included      396\n",
       "1 Long layover                     20\n",
       "Change airports                     8\n",
       "Business class                      5\n",
       "1 Short layover                     1\n",
       "Red-eye flight                      1\n",
       "2 Long layover                      1\n",
       "Name: Additional_Info, dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new['Additional_Info'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "60531b8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "f_new.drop('Duration',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "0e622955",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>2</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>7</td>\n",
       "      <td>0.044930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>19</td>\n",
       "      <td>0.012581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>5</td>\n",
       "      <td>0.045529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>4</td>\n",
       "      <td>0.020818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>23</td>\n",
       "      <td>0.024787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>2</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>6</td>\n",
       "      <td>0.033099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.025386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>14</td>\n",
       "      <td>0.031751</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline Total_Stops Additional_Info    Price Flight_time  \\\n",
       "0                 IndiGo    non-stop         No info   3897.0     Evening   \n",
       "1              Air India     2 stops         No info   7662.0    midnight   \n",
       "2            Jet Airways     2 stops         No info  13882.0     morning   \n",
       "3                 IndiGo      1 stop         No info   6218.0     Evening   \n",
       "4                 IndiGo      1 stop         No info  13302.0     Evening   \n",
       "...                  ...         ...             ...      ...         ...   \n",
       "13349          Air India      1 stop         No info      NaN     Evening   \n",
       "13350             IndiGo    non-stop         No info      NaN     Evening   \n",
       "13351        Jet Airways      1 stop         No info      NaN     Evening   \n",
       "13352          Air India      1 stop         No info      NaN    midnight   \n",
       "13353  Multiple carriers      1 stop         No info      NaN    midnight   \n",
       "\n",
       "        percent                 Dist flight_duration      freq  \n",
       "0      0.206380  BangloretoNew Delhi               2  0.222181  \n",
       "1      0.101018    KolkatatoBanglore               7  0.044930  \n",
       "2      0.132470        DelhitoCochin              19  0.012581  \n",
       "3      0.090909    KolkatatoBanglore               5  0.045529  \n",
       "4      0.101018  BangloretoNew Delhi               4  0.020818  \n",
       "...         ...                  ...             ...       ...  \n",
       "13349  0.238580    KolkatatoBanglore              23  0.024787  \n",
       "13350  0.206380    KolkatatoBanglore               2  0.222181  \n",
       "13351  0.238580        DelhitoCochin               6  0.033099  \n",
       "13352  0.238580        DelhitoCochin              15  0.025386  \n",
       "13353  0.238580        DelhitoCochin              14  0.031751  \n",
       "\n",
       "[13354 rows x 9 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "74b16544",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "f_new.drop('flight_duration',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "646073b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.044930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.012581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.045529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>0.020818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.024787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.033099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.025386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>NaN</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.031751</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13354 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline Total_Stops Additional_Info    Price Flight_time  \\\n",
       "0                 IndiGo    non-stop         No info   3897.0     Evening   \n",
       "1              Air India     2 stops         No info   7662.0    midnight   \n",
       "2            Jet Airways     2 stops         No info  13882.0     morning   \n",
       "3                 IndiGo      1 stop         No info   6218.0     Evening   \n",
       "4                 IndiGo      1 stop         No info  13302.0     Evening   \n",
       "...                  ...         ...             ...      ...         ...   \n",
       "13349          Air India      1 stop         No info      NaN     Evening   \n",
       "13350             IndiGo    non-stop         No info      NaN     Evening   \n",
       "13351        Jet Airways      1 stop         No info      NaN     Evening   \n",
       "13352          Air India      1 stop         No info      NaN    midnight   \n",
       "13353  Multiple carriers      1 stop         No info      NaN    midnight   \n",
       "\n",
       "        percent                 Dist      freq  \n",
       "0      0.206380  BangloretoNew Delhi  0.222181  \n",
       "1      0.101018    KolkatatoBanglore  0.044930  \n",
       "2      0.132470        DelhitoCochin  0.012581  \n",
       "3      0.090909    KolkatatoBanglore  0.045529  \n",
       "4      0.101018  BangloretoNew Delhi  0.020818  \n",
       "...         ...                  ...       ...  \n",
       "13349  0.238580    KolkatatoBanglore  0.024787  \n",
       "13350  0.206380    KolkatatoBanglore  0.222181  \n",
       "13351  0.238580        DelhitoCochin  0.033099  \n",
       "13352  0.238580        DelhitoCochin  0.025386  \n",
       "13353  0.238580        DelhitoCochin  0.031751  \n",
       "\n",
       "[13354 rows x 8 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "4fc8f3a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((13354, 8), (10683, 11), (2671, 10))"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_new.shape,Flight_train.shape,Flight_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "0c204f38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662.0</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.044930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.012581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.045529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>0.020818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10678</th>\n",
       "      <td>Air Asia</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4107.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10679</th>\n",
       "      <td>Air India</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>4145.0</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.038715</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10680</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>7229.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.038715</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>0.046952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10681</th>\n",
       "      <td>Vistara</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>12648.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.101018</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10682</th>\n",
       "      <td>Air India</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>11753.0</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.132470</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.039763</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10683 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Airline Total_Stops Additional_Info    Price Flight_time   percent  \\\n",
       "0           IndiGo    non-stop         No info   3897.0     Evening  0.206380   \n",
       "1        Air India     2 stops         No info   7662.0    midnight  0.101018   \n",
       "2      Jet Airways     2 stops         No info  13882.0     morning  0.132470   \n",
       "3           IndiGo      1 stop         No info   6218.0     Evening  0.090909   \n",
       "4           IndiGo      1 stop         No info  13302.0     Evening  0.101018   \n",
       "...            ...         ...             ...      ...         ...       ...   \n",
       "10678     Air Asia    non-stop         No info   4107.0     Evening  0.132470   \n",
       "10679    Air India    non-stop         No info   4145.0     Evening  0.038715   \n",
       "10680  Jet Airways    non-stop         No info   7229.0     morning  0.038715   \n",
       "10681      Vistara    non-stop         No info  12648.0     morning  0.101018   \n",
       "10682    Air India     2 stops         No info  11753.0     morning  0.132470   \n",
       "\n",
       "                      Dist      freq  \n",
       "0      BangloretoNew Delhi  0.222181  \n",
       "1        KolkatatoBanglore  0.044930  \n",
       "2            DelhitoCochin  0.012581  \n",
       "3        KolkatatoBanglore  0.045529  \n",
       "4      BangloretoNew Delhi  0.020818  \n",
       "...                    ...       ...  \n",
       "10678    KolkatatoBanglore  0.222181  \n",
       "10679    KolkatatoBanglore  0.222181  \n",
       "10680  BangloretoNew Delhi  0.046952  \n",
       "10681  BangloretoNew Delhi  0.222181  \n",
       "10682        DelhitoCochin  0.039763  \n",
       "\n",
       "[10683 rows x 8 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train=f_new.loc[0:Flight_train.shape[0]-1]\n",
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "e1cab320",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\91882\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:4906: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Flight_time</th>\n",
       "      <th>percent</th>\n",
       "      <th>Dist</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10683</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.034372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10684</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.020818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10685</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>In-flight meal not included</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.191928</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.024787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10686</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>morning</td>\n",
       "      <td>0.191928</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.038640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10687</th>\n",
       "      <td>Air Asia</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>BangloretoNew Delhi</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.024787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.206380</td>\n",
       "      <td>KolkatatoBanglore</td>\n",
       "      <td>0.222181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>Evening</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.033099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.025386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>midnight</td>\n",
       "      <td>0.238580</td>\n",
       "      <td>DelhitoCochin</td>\n",
       "      <td>0.031751</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2671 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Airline Total_Stops              Additional_Info Flight_time  \\\n",
       "10683        Jet Airways      1 stop                      No info     Evening   \n",
       "10684             IndiGo      1 stop                      No info     morning   \n",
       "10685        Jet Airways      1 stop  In-flight meal not included     Evening   \n",
       "10686  Multiple carriers      1 stop                      No info     morning   \n",
       "10687           Air Asia    non-stop                      No info     Evening   \n",
       "...                  ...         ...                          ...         ...   \n",
       "13349          Air India      1 stop                      No info     Evening   \n",
       "13350             IndiGo    non-stop                      No info     Evening   \n",
       "13351        Jet Airways      1 stop                      No info     Evening   \n",
       "13352          Air India      1 stop                      No info    midnight   \n",
       "13353  Multiple carriers      1 stop                      No info    midnight   \n",
       "\n",
       "        percent                 Dist      freq  \n",
       "10683  0.238580        DelhitoCochin  0.034372  \n",
       "10684  0.090909    KolkatatoBanglore  0.020818  \n",
       "10685  0.191928        DelhitoCochin  0.024787  \n",
       "10686  0.191928        DelhitoCochin  0.038640  \n",
       "10687  0.238580  BangloretoNew Delhi  0.222181  \n",
       "...         ...                  ...       ...  \n",
       "13349  0.238580    KolkatatoBanglore  0.024787  \n",
       "13350  0.206380    KolkatatoBanglore  0.222181  \n",
       "13351  0.238580        DelhitoCochin  0.033099  \n",
       "13352  0.238580        DelhitoCochin  0.025386  \n",
       "13353  0.238580        DelhitoCochin  0.031751  \n",
       "\n",
       "[2671 rows x 7 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test=f_new.loc[Flight_train.shape[0]:,]\n",
    "test.drop('Price',axis=1,inplace=True)\n",
    "test\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "68db3435",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Train Additional Info\n",
      "['No info' 'In-flight meal not included' 'No check-in baggage included'\n",
      " '1 Short layover' '1 Long layover' 'Change airports' 'Business class'\n",
      " 'Red-eye flight' '2 Long layover']\n",
      " test Additional Info\n",
      "['No info' 'In-flight meal not included' 'No check-in baggage included'\n",
      " '1 Long layover' 'Business class' 'Change airports']\n"
     ]
    }
   ],
   "source": [
    "print(' Train Additional Info') \n",
    "print(train.Additional_Info.unique())\n",
    "print(' test Additional Info') \n",
    "print(test.Additional_Info.unique())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "c87f19e2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "train=train[~train.Airline.isin(['Trujet'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "2ae4c69e",
   "metadata": {},
   "outputs": [],
   "source": [
    "train=train[~train.Additional_Info.isin(['1 Short layover','Red-eye flight','2 Long layover'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "484574fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10679, 8)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "f9166ed9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "new_train=pd.get_dummies(train)\n",
    "x=new_train.drop('Price',axis=1)\n",
    "y=new_train.Price\n",
    "new_test=pd.get_dummies(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "09cdde0e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>percent</th>\n",
       "      <th>freq</th>\n",
       "      <th>Airline_Air Asia</th>\n",
       "      <th>Airline_Air India</th>\n",
       "      <th>Airline_GoAir</th>\n",
       "      <th>Airline_IndiGo</th>\n",
       "      <th>Airline_Jet Airways</th>\n",
       "      <th>Airline_Jet Airways Business</th>\n",
       "      <th>Airline_Multiple carriers</th>\n",
       "      <th>Airline_Multiple carriers Premium economy</th>\n",
       "      <th>...</th>\n",
       "      <th>Additional_Info_No check-in baggage included</th>\n",
       "      <th>Additional_Info_No info</th>\n",
       "      <th>Flight_time_Evening</th>\n",
       "      <th>Flight_time_midnight</th>\n",
       "      <th>Flight_time_morning</th>\n",
       "      <th>Dist_BangloretoNew Delhi</th>\n",
       "      <th>Dist_ChennaitoKolkata</th>\n",
       "      <th>Dist_DelhitoCochin</th>\n",
       "      <th>Dist_KolkatatoBanglore</th>\n",
       "      <th>Dist_MumbaitoHyderabad</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10683</th>\n",
       "      <td>0.238580</td>\n",
       "      <td>0.034372</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10684</th>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.020818</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10685</th>\n",
       "      <td>0.191928</td>\n",
       "      <td>0.024787</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10686</th>\n",
       "      <td>0.191928</td>\n",
       "      <td>0.038640</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10687</th>\n",
       "      <td>0.238580</td>\n",
       "      <td>0.222181</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13349</th>\n",
       "      <td>0.238580</td>\n",
       "      <td>0.024787</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13350</th>\n",
       "      <td>0.206380</td>\n",
       "      <td>0.222181</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13351</th>\n",
       "      <td>0.238580</td>\n",
       "      <td>0.033099</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13352</th>\n",
       "      <td>0.238580</td>\n",
       "      <td>0.025386</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13353</th>\n",
       "      <td>0.238580</td>\n",
       "      <td>0.031751</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2671 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        percent      freq  Airline_Air Asia  Airline_Air India  Airline_GoAir  \\\n",
       "10683  0.238580  0.034372                 0                  0              0   \n",
       "10684  0.090909  0.020818                 0                  0              0   \n",
       "10685  0.191928  0.024787                 0                  0              0   \n",
       "10686  0.191928  0.038640                 0                  0              0   \n",
       "10687  0.238580  0.222181                 1                  0              0   \n",
       "...         ...       ...               ...                ...            ...   \n",
       "13349  0.238580  0.024787                 0                  1              0   \n",
       "13350  0.206380  0.222181                 0                  0              0   \n",
       "13351  0.238580  0.033099                 0                  0              0   \n",
       "13352  0.238580  0.025386                 0                  1              0   \n",
       "13353  0.238580  0.031751                 0                  0              0   \n",
       "\n",
       "       Airline_IndiGo  Airline_Jet Airways  Airline_Jet Airways Business  \\\n",
       "10683               0                    1                             0   \n",
       "10684               1                    0                             0   \n",
       "10685               0                    1                             0   \n",
       "10686               0                    0                             0   \n",
       "10687               0                    0                             0   \n",
       "...               ...                  ...                           ...   \n",
       "13349               0                    0                             0   \n",
       "13350               1                    0                             0   \n",
       "13351               0                    1                             0   \n",
       "13352               0                    0                             0   \n",
       "13353               0                    0                             0   \n",
       "\n",
       "       Airline_Multiple carriers  Airline_Multiple carriers Premium economy  \\\n",
       "10683                          0                                          0   \n",
       "10684                          0                                          0   \n",
       "10685                          0                                          0   \n",
       "10686                          1                                          0   \n",
       "10687                          0                                          0   \n",
       "...                          ...                                        ...   \n",
       "13349                          0                                          0   \n",
       "13350                          0                                          0   \n",
       "13351                          0                                          0   \n",
       "13352                          0                                          0   \n",
       "13353                          1                                          0   \n",
       "\n",
       "       ...  Additional_Info_No check-in baggage included  \\\n",
       "10683  ...                                             0   \n",
       "10684  ...                                             0   \n",
       "10685  ...                                             0   \n",
       "10686  ...                                             0   \n",
       "10687  ...                                             0   \n",
       "...    ...                                           ...   \n",
       "13349  ...                                             0   \n",
       "13350  ...                                             0   \n",
       "13351  ...                                             0   \n",
       "13352  ...                                             0   \n",
       "13353  ...                                             0   \n",
       "\n",
       "       Additional_Info_No info  Flight_time_Evening  Flight_time_midnight  \\\n",
       "10683                        1                    1                     0   \n",
       "10684                        1                    0                     0   \n",
       "10685                        0                    1                     0   \n",
       "10686                        1                    0                     0   \n",
       "10687                        1                    1                     0   \n",
       "...                        ...                  ...                   ...   \n",
       "13349                        1                    1                     0   \n",
       "13350                        1                    1                     0   \n",
       "13351                        1                    1                     0   \n",
       "13352                        1                    0                     1   \n",
       "13353                        1                    0                     1   \n",
       "\n",
       "       Flight_time_morning  Dist_BangloretoNew Delhi  Dist_ChennaitoKolkata  \\\n",
       "10683                    0                         0                      0   \n",
       "10684                    1                         0                      0   \n",
       "10685                    0                         0                      0   \n",
       "10686                    1                         0                      0   \n",
       "10687                    0                         1                      0   \n",
       "...                    ...                       ...                    ...   \n",
       "13349                    0                         0                      0   \n",
       "13350                    0                         0                      0   \n",
       "13351                    0                         0                      0   \n",
       "13352                    0                         0                      0   \n",
       "13353                    0                         0                      0   \n",
       "\n",
       "       Dist_DelhitoCochin  Dist_KolkatatoBanglore  Dist_MumbaitoHyderabad  \n",
       "10683                   1                       0                       0  \n",
       "10684                   0                       1                       0  \n",
       "10685                   1                       0                       0  \n",
       "10686                   1                       0                       0  \n",
       "10687                   0                       0                       0  \n",
       "...                   ...                     ...                     ...  \n",
       "13349                   0                       1                       0  \n",
       "13350                   0                       1                       0  \n",
       "13351                   1                       0                       0  \n",
       "13352                   1                       0                       0  \n",
       "13353                   1                       0                       0  \n",
       "\n",
       "[2671 rows x 32 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "66b679b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>percent</th>\n",
       "      <th>freq</th>\n",
       "      <th>Airline_Air Asia</th>\n",
       "      <th>Airline_Air India</th>\n",
       "      <th>Airline_GoAir</th>\n",
       "      <th>Airline_IndiGo</th>\n",
       "      <th>Airline_Jet Airways</th>\n",
       "      <th>Airline_Jet Airways Business</th>\n",
       "      <th>Airline_Multiple carriers</th>\n",
       "      <th>Airline_Multiple carriers Premium economy</th>\n",
       "      <th>...</th>\n",
       "      <th>Additional_Info_No check-in baggage included</th>\n",
       "      <th>Additional_Info_No info</th>\n",
       "      <th>Flight_time_Evening</th>\n",
       "      <th>Flight_time_midnight</th>\n",
       "      <th>Flight_time_morning</th>\n",
       "      <th>Dist_BangloretoNew Delhi</th>\n",
       "      <th>Dist_ChennaitoKolkata</th>\n",
       "      <th>Dist_DelhitoCochin</th>\n",
       "      <th>Dist_KolkatatoBanglore</th>\n",
       "      <th>Dist_MumbaitoHyderabad</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.206380</td>\n",
       "      <td>0.222181</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.101018</td>\n",
       "      <td>0.044930</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.132470</td>\n",
       "      <td>0.012581</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.045529</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.101018</td>\n",
       "      <td>0.020818</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10678</th>\n",
       "      <td>0.132470</td>\n",
       "      <td>0.222181</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10679</th>\n",
       "      <td>0.038715</td>\n",
       "      <td>0.222181</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10680</th>\n",
       "      <td>0.038715</td>\n",
       "      <td>0.046952</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10681</th>\n",
       "      <td>0.101018</td>\n",
       "      <td>0.222181</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10682</th>\n",
       "      <td>0.132470</td>\n",
       "      <td>0.039763</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10679 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        percent      freq  Airline_Air Asia  Airline_Air India  Airline_GoAir  \\\n",
       "0      0.206380  0.222181                 0                  0              0   \n",
       "1      0.101018  0.044930                 0                  1              0   \n",
       "2      0.132470  0.012581                 0                  0              0   \n",
       "3      0.090909  0.045529                 0                  0              0   \n",
       "4      0.101018  0.020818                 0                  0              0   \n",
       "...         ...       ...               ...                ...            ...   \n",
       "10678  0.132470  0.222181                 1                  0              0   \n",
       "10679  0.038715  0.222181                 0                  1              0   \n",
       "10680  0.038715  0.046952                 0                  0              0   \n",
       "10681  0.101018  0.222181                 0                  0              0   \n",
       "10682  0.132470  0.039763                 0                  1              0   \n",
       "\n",
       "       Airline_IndiGo  Airline_Jet Airways  Airline_Jet Airways Business  \\\n",
       "0                   1                    0                             0   \n",
       "1                   0                    0                             0   \n",
       "2                   0                    1                             0   \n",
       "3                   1                    0                             0   \n",
       "4                   1                    0                             0   \n",
       "...               ...                  ...                           ...   \n",
       "10678               0                    0                             0   \n",
       "10679               0                    0                             0   \n",
       "10680               0                    1                             0   \n",
       "10681               0                    0                             0   \n",
       "10682               0                    0                             0   \n",
       "\n",
       "       Airline_Multiple carriers  Airline_Multiple carriers Premium economy  \\\n",
       "0                              0                                          0   \n",
       "1                              0                                          0   \n",
       "2                              0                                          0   \n",
       "3                              0                                          0   \n",
       "4                              0                                          0   \n",
       "...                          ...                                        ...   \n",
       "10678                          0                                          0   \n",
       "10679                          0                                          0   \n",
       "10680                          0                                          0   \n",
       "10681                          0                                          0   \n",
       "10682                          0                                          0   \n",
       "\n",
       "       ...  Additional_Info_No check-in baggage included  \\\n",
       "0      ...                                             0   \n",
       "1      ...                                             0   \n",
       "2      ...                                             0   \n",
       "3      ...                                             0   \n",
       "4      ...                                             0   \n",
       "...    ...                                           ...   \n",
       "10678  ...                                             0   \n",
       "10679  ...                                             0   \n",
       "10680  ...                                             0   \n",
       "10681  ...                                             0   \n",
       "10682  ...                                             0   \n",
       "\n",
       "       Additional_Info_No info  Flight_time_Evening  Flight_time_midnight  \\\n",
       "0                            1                    1                     0   \n",
       "1                            1                    0                     1   \n",
       "2                            1                    0                     0   \n",
       "3                            1                    1                     0   \n",
       "4                            1                    1                     0   \n",
       "...                        ...                  ...                   ...   \n",
       "10678                        1                    1                     0   \n",
       "10679                        1                    1                     0   \n",
       "10680                        1                    0                     0   \n",
       "10681                        1                    0                     0   \n",
       "10682                        1                    0                     0   \n",
       "\n",
       "       Flight_time_morning  Dist_BangloretoNew Delhi  Dist_ChennaitoKolkata  \\\n",
       "0                        0                         1                      0   \n",
       "1                        0                         0                      0   \n",
       "2                        1                         0                      0   \n",
       "3                        0                         0                      0   \n",
       "4                        0                         1                      0   \n",
       "...                    ...                       ...                    ...   \n",
       "10678                    0                         0                      0   \n",
       "10679                    0                         0                      0   \n",
       "10680                    1                         1                      0   \n",
       "10681                    1                         1                      0   \n",
       "10682                    1                         0                      0   \n",
       "\n",
       "       Dist_DelhitoCochin  Dist_KolkatatoBanglore  Dist_MumbaitoHyderabad  \n",
       "0                       0                       0                       0  \n",
       "1                       0                       1                       0  \n",
       "2                       1                       0                       0  \n",
       "3                       0                       1                       0  \n",
       "4                       0                       0                       0  \n",
       "...                   ...                     ...                     ...  \n",
       "10678                   0                       1                       0  \n",
       "10679                   0                       1                       0  \n",
       "10680                   0                       0                       0  \n",
       "10681                   0                       0                       0  \n",
       "10682                   1                       0                       0  \n",
       "\n",
       "[10679 rows x 32 columns]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "7780e54f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import lightgbm as lgm\n",
    "lg=lgm.LGBMRegressor()\n",
    "lgmodel=lg.fit(x,y)\n",
    "lgpred=lgmodel.predict(new_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "bb3a57a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "solution = pd.DataFrame({\"Price\": lgpred})\n",
    "\n",
    "solution.to_csv(\"Flightlgbm.csv\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "19618050",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import KFold,GridSearchCV\n",
    "rf=RandomForestRegressor(random_state=1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "2bea066d",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_12168/3961580124.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mkv\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mKFold\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[0mtree\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mGridSearchCV\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mrf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcv\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mkv\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 10\u001b[1;33m \u001b[0mmodelcv\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtree\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     11\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Best parameters :'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmodelcv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbest_params_\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[0;32m    873\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    874\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 875\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    876\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    877\u001b[0m             \u001b[1;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[1;34m(self, evaluate_candidates)\u001b[0m\n\u001b[0;32m   1373\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1374\u001b[0m         \u001b[1;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1375\u001b[1;33m         \u001b[0mevaluate_candidates\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1376\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1377\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[1;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[0;32m    820\u001b[0m                     )\n\u001b[0;32m    821\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 822\u001b[1;33m                 out = parallel(\n\u001b[0m\u001b[0;32m    823\u001b[0m                     delayed(_fit_and_score)(\n\u001b[0;32m    824\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m   1044\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1045\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1046\u001b[1;33m             \u001b[1;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1047\u001b[0m                 \u001b[1;32mpass\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1048\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[1;34m(self, iterator)\u001b[0m\n\u001b[0;32m    859\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    860\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 861\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    862\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    863\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    777\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    778\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 779\u001b[1;33m             \u001b[0mjob\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    780\u001b[0m             \u001b[1;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    781\u001b[0m             \u001b[1;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[1;34m(self, func, callback)\u001b[0m\n\u001b[0;32m    206\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    207\u001b[0m         \u001b[1;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 208\u001b[1;33m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    209\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    570\u001b[0m         \u001b[1;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    571\u001b[0m         \u001b[1;31m# arguments in memory\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 572\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    573\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    574\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    260\u001b[0m         \u001b[1;31m# change the default number of processes to -1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    261\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 262\u001b[1;33m             return [func(*args, **kwargs)\n\u001b[0m\u001b[0;32m    263\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[0;32m    264\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    260\u001b[0m         \u001b[1;31m# change the default number of processes to -1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    261\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 262\u001b[1;33m             return [func(*args, **kwargs)\n\u001b[0m\u001b[0;32m    263\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[0;32m    264\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\fixes.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    115\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    116\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 117\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    118\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    119\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[1;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[0;32m    684\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    685\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 686\u001b[1;33m             \u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    687\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    688\u001b[0m     \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_forest.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    474\u001b[0m             \u001b[1;31m# parallel_backend contexts set at a higher level,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    475\u001b[0m             \u001b[1;31m# since correctness does not rely on using threads.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 476\u001b[1;33m             trees = Parallel(\n\u001b[0m\u001b[0;32m    477\u001b[0m                 \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    478\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m   1041\u001b[0m             \u001b[1;31m# remaining jobs.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1042\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1043\u001b[1;33m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1044\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1045\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[1;34m(self, iterator)\u001b[0m\n\u001b[0;32m    859\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    860\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 861\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    862\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    863\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    777\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    778\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 779\u001b[1;33m             \u001b[0mjob\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    780\u001b[0m             \u001b[1;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    781\u001b[0m             \u001b[1;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[1;34m(self, func, callback)\u001b[0m\n\u001b[0;32m    206\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    207\u001b[0m         \u001b[1;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 208\u001b[1;33m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    209\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    570\u001b[0m         \u001b[1;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    571\u001b[0m         \u001b[1;31m# arguments in memory\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 572\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    573\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    574\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    260\u001b[0m         \u001b[1;31m# change the default number of processes to -1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    261\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 262\u001b[1;33m             return [func(*args, **kwargs)\n\u001b[0m\u001b[0;32m    263\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[0;32m    264\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    260\u001b[0m         \u001b[1;31m# change the default number of processes to -1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    261\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 262\u001b[1;33m             return [func(*args, **kwargs)\n\u001b[0m\u001b[0;32m    263\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[0;32m    264\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\fixes.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    115\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    116\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 117\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    118\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    119\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_forest.py\u001b[0m in \u001b[0;36m_parallel_build_trees\u001b[1;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap)\u001b[0m\n\u001b[0;32m    177\u001b[0m             \u001b[0mtree\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_samples\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_samples_bootstrap\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    178\u001b[0m         )\n\u001b[1;32m--> 179\u001b[1;33m         \u001b[0msample_counts\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbincount\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindices\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mminlength\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mn_samples\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    180\u001b[0m         \u001b[0mcurr_sample_weight\u001b[0m \u001b[1;33m*=\u001b[0m \u001b[0msample_counts\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    181\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mbincount\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "params=[{'criterion':['entropy','gini'],\n",
    "       'max_depth': range(5,20),\n",
    "       'min_samples_split': range(2,10),\n",
    "       'max_features' : ['sqrt','log2'],\n",
    "       'n_estimators': [10,20,30,40,50,60,70,80,90],\n",
    "       'min_samples_leaf': [1, 5, 9],\n",
    "       'max_leaf_nodes': [2, 5, 8, 11]}]\n",
    "kv=KFold(n_splits=10,shuffle=True,random_state=1)\n",
    "tree=GridSearchCV(estimator=rf,param_grid=params,cv=kv)\n",
    "modelcv=tree.fit(x,y)\n",
    "\n",
    "print('Best parameters :', modelcv.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86e0658b",
   "metadata": {},
   "outputs": [],
   "source": [
    "model=tree.fit(x,y)\n",
    "predict=model.predict(newtest)\n",
    "report=get_train_report(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "id": "a46daee5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\91882\\Anaconda3\\lib\\site-packages\\sklearn\\base.py:493: FutureWarning: The feature names should match those that were passed during fit. Starting version 1.2, an error will be raised.\n",
      "Feature names seen at fit time, yet now missing:\n",
      "- Additional_Info_1 Short layover\n",
      "- Additional_Info_2 Long layover\n",
      "- Additional_Info_Red-eye flight\n",
      "\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "X has 32 features, but GradientBoostingRegressor is expecting 35 features as input.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_11012/3759183587.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mgbm\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mGradientBoostingRegressor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mprice_gbm\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mgbm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnew_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\_gb.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m   1955\u001b[0m             \u001b[0mThe\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mvalues\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1956\u001b[0m         \"\"\"\n\u001b[1;32m-> 1957\u001b[1;33m         X = self._validate_data(\n\u001b[0m\u001b[0;32m   1958\u001b[0m             \u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"C\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"csr\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1959\u001b[0m         )\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[1;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[0;32m    598\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    599\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mcheck_params\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"ensure_2d\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 600\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_check_n_features\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mreset\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    601\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    602\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36m_check_n_features\u001b[1;34m(self, X, reset)\u001b[0m\n\u001b[0;32m    398\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    399\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mn_features\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mn_features_in_\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 400\u001b[1;33m             raise ValueError(\n\u001b[0m\u001b[0;32m    401\u001b[0m                 \u001b[1;34mf\"X has {n_features} features, but {self.__class__.__name__} \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    402\u001b[0m                 \u001b[1;34mf\"is expecting {self.n_features_in_} features as input.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: X has 32 features, but GradientBoostingRegressor is expecting 35 features as input."
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "gbm=GradientBoostingRegressor()\n",
    "\n",
    "price_gbm=gbm.fit(x,y).predict(new_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "id": "285adb4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "solution = pd.DataFrame({\"Price\": price_gbm})\n",
    "\n",
    "solution.to_csv(\"Flight.csv\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b794c6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "y,Yhat,y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "id": "f40bc97d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse 95.15234786325522\n"
     ]
    }
   ],
   "source": [
    "print('rmse',np.sqrt(np.mean(price_gbm)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "id": "84b3fd37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2666</th>\n",
       "      <td>14046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2667</th>\n",
       "      <td>14086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2668</th>\n",
       "      <td>22720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2669</th>\n",
       "      <td>23544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2670</th>\n",
       "      <td>27489</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2671 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Price\n",
       "0     15998\n",
       "1     16612\n",
       "2     25572\n",
       "3     25778\n",
       "4     16934\n",
       "...     ...\n",
       "2666  14046\n",
       "2667  14086\n",
       "2668  22720\n",
       "2669  23544\n",
       "2670  27489\n",
       "\n",
       "[2671 rows x 1 columns]"
      ]
     },
     "execution_count": 329,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_excel('Sample_submission.xlsx')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
